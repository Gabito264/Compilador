
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaDO ELSE END FLOAT IF INTEGER MAIN PRINT PROGRAM STRING VAR VOID WHILE closing_anglbrack closing_brack closing_par comma comment const_float const_int const_string identifier op_assign op_div op_equals op_lesser_than op_lessthan_equal op_minus op_more_than op_morethan_equal op_mult op_not_equal op_plus opening_anglbrack opening_brack opening_par semicol twopointprograma : PROGRAM create_program semicol vars funcs complete_main body elim_programcreate_program : identifiercomplete_main : MAINelim_program : ENDprograma : PROGRAM error semicol vars funcs MAIN body ENDvars : VAR var_definitionvars : var_definition : id_list twopoint type semicol var_definitionvar_definition : id_list twopoint type semicolid_list : identifier comma id_listid_list : identifiervar_definition : error twopoint type semicol var_definitionvar_definition : error twopoint type semicoltype : INTEGERtype : FLOATtype : STRINGfuncs : func funcsfuncs : func : VOID create_function opening_par param_list closing_par opening_brack create_func_quad body closing_brack end_functioncreate_function : identifiercreate_func_quad : varsend_function : semicolparam_list : param_list comma paramparam_list : paramparam_list : param : identifier twopoint typebody : opening_anglbrack statements closing_anglbrackstatements : statements statementstatements : statementstatements :statement : assignstatement : conditionstatement : cyclestatement : f_callstatement : print_statementassign : identifier op_assign expression semicolassign : identifier op_assign const_string semicolassign : identifier op_assign error semicolexpression : expexpression : exp op_lesser_than expexpression : exp op_more_than expexpression : exp op_lessthan_equal expexpression : exp op_morethan_equal expexpression : exp op_equals expexpression : exp op_not_equal expexp : exp op_plus termexp : exp op_minus termexp : termterm : term op_mult factorterm : term op_div factorterm : factorfactor : opening_par expression closing_parfactor : op_plus identifierfactor : op_plus ctefactor : op_minus identifierfactor : op_minus ctefactor : identifierfactor : ctecte : const_intcte : const_floatf_call : check_function opening_par arguments closing_par make_call_quadscheck_function : identifiermake_call_quads : semicolarguments : arguments comma expressionarguments : expressionarguments : print_statement : PRINT opening_par print_args closing_par last_printprint_args : print_args comma print_argprint_args : print_argprint_arg : expressionprint_arg : const_stringlast_print : semicollast_print_dummy : semicolprint_statement : PRINT opening_par error closing_par last_print_dummycycle : start_cycle body WHILE opening_par expression end_cycle semicolstart_cycle : DOstart_cycle_dummy : DOend_cycle : closing_parend_cycle_dummy : closing_parcycle : start_cycle_dummy body WHILE opening_par error end_cycle_dummy semicolcondition : IF opening_par expression gotof body check_else last_gotogotof : closing_pargotof_dummy : closing_parcheck_else : else_goto bodyelse_goto : ELSE last_goto : semicollast_goto_dummy : semicolcheck_else : condition : IF opening_par error gotof_dummy body check_else last_goto_dummy'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,38,39,59,],[0,-1,-4,-5,]),'error':([2,9,57,58,62,63,67,123,],[4,16,16,16,76,87,93,145,]),'identifier':([2,9,13,26,29,30,40,41,42,43,44,45,46,57,58,61,62,63,66,67,69,78,80,82,100,101,102,103,104,105,106,107,108,109,110,113,114,122,125,127,146,147,149,150,152,153,164,165,167,168,169,170,],[5,17,23,17,47,56,47,-29,-31,-32,-33,-34,-35,17,17,-28,73,73,73,73,56,111,115,73,-36,-37,-38,73,73,73,73,73,73,73,73,73,73,73,73,73,-61,-63,-67,-72,-74,-73,-81,-86,-89,-87,-75,-80,]),'semicol':([3,4,5,31,32,33,34,35,60,73,74,75,76,77,79,81,83,84,85,111,112,115,116,124,126,128,131,132,133,134,135,136,137,138,139,140,141,142,143,155,158,159,160,161,162,163,166,],[6,7,-2,57,-14,-15,-16,58,-27,-57,100,101,102,-39,-48,-51,-58,-59,-60,-53,-54,-55,-56,147,150,153,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-52,-88,-88,165,168,169,-78,170,-79,172,-84,]),'VAR':([6,7,97,],[9,9,9,]),'VOID':([6,7,8,10,12,14,57,58,71,72,171,172,],[-7,-7,13,13,13,-6,-9,-13,-8,-12,-19,-22,]),'MAIN':([6,7,8,10,11,12,14,18,21,57,58,71,72,171,172,],[-7,-7,-18,-18,20,-18,-6,27,-17,-9,-13,-8,-12,-19,-22,]),'opening_anglbrack':([14,19,20,27,49,50,53,57,58,71,72,97,118,119,120,121,129,130,156,157,],[-6,29,-3,29,29,29,-76,-9,-13,-8,-12,-7,29,-82,29,-83,29,-21,29,-85,]),'twopoint':([15,16,17,36,56,],[24,25,-11,-10,70,]),'comma':([17,30,32,33,34,54,55,66,73,77,79,81,83,84,85,90,91,92,94,95,96,98,99,111,112,115,116,131,132,133,134,135,136,137,138,139,140,141,148,151,],[26,-25,-14,-15,-16,69,-24,-66,-57,-39,-48,-51,-58,-59,-60,125,-65,127,-69,-70,-71,-23,-26,-53,-54,-55,-56,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-52,-64,-68,]),'opening_par':([22,23,47,48,51,52,62,63,66,67,82,88,89,103,104,105,106,107,108,109,110,113,114,122,125,127,],[30,-20,-62,63,66,67,82,82,82,82,82,122,123,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'INTEGER':([24,25,70,],[32,32,32,]),'FLOAT':([24,25,70,],[33,33,33,]),'STRING':([24,25,70,],[34,34,34,]),'END':([28,37,60,],[39,59,-27,]),'closing_anglbrack':([29,40,41,42,43,44,45,46,61,100,101,102,146,147,149,150,152,153,164,165,167,168,169,170,],[-30,60,-29,-31,-32,-33,-34,-35,-28,-36,-37,-38,-61,-63,-67,-72,-74,-73,-81,-86,-89,-87,-75,-80,]),'IF':([29,40,41,42,43,44,45,46,61,100,101,102,146,147,149,150,152,153,164,165,167,168,169,170,],[48,48,-29,-31,-32,-33,-34,-35,-28,-36,-37,-38,-61,-63,-67,-72,-74,-73,-81,-86,-89,-87,-75,-80,]),'PRINT':([29,40,41,42,43,44,45,46,61,100,101,102,146,147,149,150,152,153,164,165,167,168,169,170,],[52,52,-29,-31,-32,-33,-34,-35,-28,-36,-37,-38,-61,-63,-67,-72,-74,-73,-81,-86,-89,-87,-75,-80,]),'DO':([29,40,41,42,43,44,45,46,61,100,101,102,146,147,149,150,152,153,164,165,167,168,169,170,],[53,53,-29,-31,-32,-33,-34,-35,-28,-36,-37,-38,-61,-63,-67,-72,-74,-73,-81,-86,-89,-87,-75,-80,]),'closing_par':([30,32,33,34,54,55,66,73,77,79,81,83,84,85,86,87,90,91,92,93,94,95,96,98,99,111,112,115,116,117,131,132,133,134,135,136,137,138,139,140,141,144,145,148,151,],[-25,-14,-15,-16,68,-24,-66,-57,-39,-48,-51,-58,-59,-60,119,121,124,-65,126,128,-69,-70,-71,-23,-26,-53,-54,-55,-56,141,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-52,160,162,-64,-68,]),'op_assign':([47,],[62,]),'WHILE':([60,64,65,],[-27,88,89,]),'ELSE':([60,142,143,],[-27,157,157,]),'closing_brack':([60,154,],[-27,163,]),'const_string':([62,67,127,],[75,96,96,]),'op_plus':([62,63,66,67,73,77,79,81,82,83,84,85,103,104,105,106,107,108,109,110,111,112,113,114,115,116,122,125,127,131,132,133,134,135,136,137,138,139,140,141,],[78,78,78,78,-57,109,-48,-51,78,-58,-59,-60,78,78,78,78,78,78,78,78,-53,-54,78,78,-55,-56,78,78,78,109,109,109,109,109,109,-46,-47,-49,-50,-52,]),'op_minus':([62,63,66,67,73,77,79,81,82,83,84,85,103,104,105,106,107,108,109,110,111,112,113,114,115,116,122,125,127,131,132,133,134,135,136,137,138,139,140,141,],[80,80,80,80,-57,110,-48,-51,80,-58,-59,-60,80,80,80,80,80,80,80,80,-53,-54,80,80,-55,-56,80,80,80,110,110,110,110,110,110,-46,-47,-49,-50,-52,]),'const_int':([62,63,66,67,78,80,82,103,104,105,106,107,108,109,110,113,114,122,125,127,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'const_float':([62,63,66,67,78,80,82,103,104,105,106,107,108,109,110,113,114,122,125,127,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'opening_brack':([68,],[97,]),'op_mult':([73,79,81,83,84,85,111,112,115,116,137,138,139,140,141,],[-57,113,-51,-58,-59,-60,-53,-54,-55,-56,113,113,-49,-50,-52,]),'op_div':([73,79,81,83,84,85,111,112,115,116,137,138,139,140,141,],[-57,114,-51,-58,-59,-60,-53,-54,-55,-56,114,114,-49,-50,-52,]),'op_lesser_than':([73,77,79,81,83,84,85,111,112,115,116,137,138,139,140,141,],[-57,103,-48,-51,-58,-59,-60,-53,-54,-55,-56,-46,-47,-49,-50,-52,]),'op_more_than':([73,77,79,81,83,84,85,111,112,115,116,137,138,139,140,141,],[-57,104,-48,-51,-58,-59,-60,-53,-54,-55,-56,-46,-47,-49,-50,-52,]),'op_lessthan_equal':([73,77,79,81,83,84,85,111,112,115,116,137,138,139,140,141,],[-57,105,-48,-51,-58,-59,-60,-53,-54,-55,-56,-46,-47,-49,-50,-52,]),'op_morethan_equal':([73,77,79,81,83,84,85,111,112,115,116,137,138,139,140,141,],[-57,106,-48,-51,-58,-59,-60,-53,-54,-55,-56,-46,-47,-49,-50,-52,]),'op_equals':([73,77,79,81,83,84,85,111,112,115,116,137,138,139,140,141,],[-57,107,-48,-51,-58,-59,-60,-53,-54,-55,-56,-46,-47,-49,-50,-52,]),'op_not_equal':([73,77,79,81,83,84,85,111,112,115,116,137,138,139,140,141,],[-57,108,-48,-51,-58,-59,-60,-53,-54,-55,-56,-46,-47,-49,-50,-52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'create_program':([2,],[3,]),'vars':([6,7,97,],[8,10,130,]),'funcs':([8,10,12,],[11,18,21,]),'func':([8,10,12,],[12,12,12,]),'var_definition':([9,57,58,],[14,71,72,]),'id_list':([9,26,57,58,],[15,36,15,15,]),'complete_main':([11,],[19,]),'create_function':([13,],[22,]),'body':([19,27,49,50,118,120,129,156,],[28,37,64,65,142,143,154,166,]),'type':([24,25,70,],[31,35,99,]),'elim_program':([28,],[38,]),'statements':([29,],[40,]),'statement':([29,40,],[41,61,]),'assign':([29,40,],[42,42,]),'condition':([29,40,],[43,43,]),'cycle':([29,40,],[44,44,]),'f_call':([29,40,],[45,45,]),'print_statement':([29,40,],[46,46,]),'start_cycle':([29,40,],[49,49,]),'start_cycle_dummy':([29,40,],[50,50,]),'check_function':([29,40,],[51,51,]),'param_list':([30,],[54,]),'param':([30,69,],[55,98,]),'expression':([62,63,66,67,82,122,125,127,],[74,86,91,95,117,144,148,95,]),'exp':([62,63,66,67,82,103,104,105,106,107,108,122,125,127,],[77,77,77,77,77,131,132,133,134,135,136,77,77,77,]),'term':([62,63,66,67,82,103,104,105,106,107,108,109,110,122,125,127,],[79,79,79,79,79,79,79,79,79,79,79,137,138,79,79,79,]),'factor':([62,63,66,67,82,103,104,105,106,107,108,109,110,113,114,122,125,127,],[81,81,81,81,81,81,81,81,81,81,81,81,81,139,140,81,81,81,]),'cte':([62,63,66,67,78,80,82,103,104,105,106,107,108,109,110,113,114,122,125,127,],[83,83,83,83,112,116,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'arguments':([66,],[90,]),'print_args':([67,],[92,]),'print_arg':([67,127,],[94,151,]),'gotof':([86,],[118,]),'gotof_dummy':([87,],[120,]),'create_func_quad':([97,],[129,]),'make_call_quads':([124,],[146,]),'last_print':([126,],[149,]),'last_print_dummy':([128,],[152,]),'check_else':([142,143,],[155,158,]),'else_goto':([142,143,],[156,156,]),'end_cycle':([144,],[159,]),'end_cycle_dummy':([145,],[161,]),'last_goto':([155,],[164,]),'last_goto_dummy':([158,],[167,]),'end_function':([163,],[171,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM create_program semicol vars funcs complete_main body elim_program','programa',8,'p_programa','main.py',18),
  ('create_program -> identifier','create_program',1,'p_create_program','main.py',22),
  ('complete_main -> MAIN','complete_main',1,'p_complete_main','main.py',27),
  ('elim_program -> END','elim_program',1,'p_elim_program','main.py',31),
  ('programa -> PROGRAM error semicol vars funcs MAIN body END','programa',8,'p_programa_id_error','main.py',37),
  ('vars -> VAR var_definition','vars',2,'p_vars','main.py',44),
  ('vars -> <empty>','vars',0,'p_vars_empty','main.py',48),
  ('var_definition -> id_list twopoint type semicol var_definition','var_definition',5,'p_definition','main.py',52),
  ('var_definition -> id_list twopoint type semicol','var_definition',4,'p_definition_once','main.py',57),
  ('id_list -> identifier comma id_list','id_list',3,'p_id_list','main.py',62),
  ('id_list -> identifier','id_list',1,'p_id_list_once','main.py',67),
  ('var_definition -> error twopoint type semicol var_definition','var_definition',5,'p_definition_error','main.py',73),
  ('var_definition -> error twopoint type semicol','var_definition',4,'p_definition_once_error','main.py',79),
  ('type -> INTEGER','type',1,'p_type_int','main.py',86),
  ('type -> FLOAT','type',1,'p_type_float','main.py',90),
  ('type -> STRING','type',1,'p_type_string','main.py',94),
  ('funcs -> func funcs','funcs',2,'p_funcs','main.py',100),
  ('funcs -> <empty>','funcs',0,'p_funcs_empty','main.py',104),
  ('func -> VOID create_function opening_par param_list closing_par opening_brack create_func_quad body closing_brack end_function','func',10,'p_func','main.py',108),
  ('create_function -> identifier','create_function',1,'p_create_function','main.py',112),
  ('create_func_quad -> vars','create_func_quad',1,'p_create_func_quad','main.py',116),
  ('end_function -> semicol','end_function',1,'p_end_function','main.py',122),
  ('param_list -> param_list comma param','param_list',3,'p_param_list','main.py',127),
  ('param_list -> param','param_list',1,'p_param_list_once','main.py',131),
  ('param_list -> <empty>','param_list',0,'p_param_list_empty','main.py',135),
  ('param -> identifier twopoint type','param',3,'p_param','main.py',139),
  ('body -> opening_anglbrack statements closing_anglbrack','body',3,'p_body','main.py',155),
  ('statements -> statements statement','statements',2,'p_statements','main.py',159),
  ('statements -> statement','statements',1,'p_statements_single','main.py',163),
  ('statements -> <empty>','statements',0,'p_statements_empty','main.py',167),
  ('statement -> assign','statement',1,'p_statement_assign','main.py',173),
  ('statement -> condition','statement',1,'p_statement_condition','main.py',178),
  ('statement -> cycle','statement',1,'p_statement_cycle','main.py',182),
  ('statement -> f_call','statement',1,'p_statement_f_call','main.py',186),
  ('statement -> print_statement','statement',1,'p_statement_print','main.py',190),
  ('assign -> identifier op_assign expression semicol','assign',4,'p_assign','main.py',195),
  ('assign -> identifier op_assign const_string semicol','assign',4,'p_assign_string','main.py',200),
  ('assign -> identifier op_assign error semicol','assign',4,'p_assign_error','main.py',207),
  ('expression -> exp','expression',1,'p_expression','main.py',213),
  ('expression -> exp op_lesser_than exp','expression',3,'p_expression_less','main.py',216),
  ('expression -> exp op_more_than exp','expression',3,'p_expression_more','main.py',220),
  ('expression -> exp op_lessthan_equal exp','expression',3,'p_expression_less_equal','main.py',224),
  ('expression -> exp op_morethan_equal exp','expression',3,'p_expression_more_equal','main.py',228),
  ('expression -> exp op_equals exp','expression',3,'p_expression_equals','main.py',232),
  ('expression -> exp op_not_equal exp','expression',3,'p_expression_not_equal','main.py',236),
  ('exp -> exp op_plus term','exp',3,'p_exp_suma','main.py',241),
  ('exp -> exp op_minus term','exp',3,'p_exp_minus','main.py',245),
  ('exp -> term','exp',1,'p_exp_term','main.py',250),
  ('term -> term op_mult factor','term',3,'p_term_mult','main.py',254),
  ('term -> term op_div factor','term',3,'p_term_div','main.py',258),
  ('term -> factor','term',1,'p_term_factor','main.py',262),
  ('factor -> opening_par expression closing_par','factor',3,'p_factor_expression','main.py',268),
  ('factor -> op_plus identifier','factor',2,'p_factor_plus_id','main.py',271),
  ('factor -> op_plus cte','factor',2,'p_factor_plus_cte','main.py',285),
  ('factor -> op_minus identifier','factor',2,'p_factor_minus_id','main.py',289),
  ('factor -> op_minus cte','factor',2,'p_factor_minus_cte','main.py',303),
  ('factor -> identifier','factor',1,'p_factor_id','main.py',307),
  ('factor -> cte','factor',1,'p_factor_cte','main.py',320),
  ('cte -> const_int','cte',1,'p_cte_int','main.py',324),
  ('cte -> const_float','cte',1,'p_cte_float','main.py',328),
  ('f_call -> check_function opening_par arguments closing_par make_call_quads','f_call',5,'p_f_call','main.py',333),
  ('check_function -> identifier','check_function',1,'p_check_function','main.py',338),
  ('make_call_quads -> semicol','make_call_quads',1,'p_make_call_quads','main.py',349),
  ('arguments -> arguments comma expression','arguments',3,'p_arguments_mult','main.py',354),
  ('arguments -> expression','arguments',1,'p_arguments_single','main.py',359),
  ('arguments -> <empty>','arguments',0,'p_arguments_empty','main.py',364),
  ('print_statement -> PRINT opening_par print_args closing_par last_print','print_statement',5,'p_print_statement','main.py',377),
  ('print_args -> print_args comma print_arg','print_args',3,'p_print_args','main.py',380),
  ('print_args -> print_arg','print_args',1,'p_print_args_single','main.py',383),
  ('print_arg -> expression','print_arg',1,'p_print_arg_expression','main.py',386),
  ('print_arg -> const_string','print_arg',1,'p_print_arg_string','main.py',391),
  ('last_print -> semicol','last_print',1,'p_last_print','main.py',397),
  ('last_print_dummy -> semicol','last_print_dummy',1,'p_last_print_dummy','main.py',402),
  ('print_statement -> PRINT opening_par error closing_par last_print_dummy','print_statement',5,'p_print_error','main.py',406),
  ('cycle -> start_cycle body WHILE opening_par expression end_cycle semicol','cycle',7,'p_cycle','main.py',413),
  ('start_cycle -> DO','start_cycle',1,'p_start_cycle','main.py',416),
  ('start_cycle_dummy -> DO','start_cycle_dummy',1,'p_start_cycle_dummy','main.py',420),
  ('end_cycle -> closing_par','end_cycle',1,'p_end_cycle','main.py',423),
  ('end_cycle_dummy -> closing_par','end_cycle_dummy',1,'p_end_cycle_dummy','main.py',428),
  ('cycle -> start_cycle_dummy body WHILE opening_par error end_cycle_dummy semicol','cycle',7,'p_cycle_error','main.py',432),
  ('condition -> IF opening_par expression gotof body check_else last_goto','condition',7,'p_condition','main.py',440),
  ('gotof -> closing_par','gotof',1,'p_gotof','main.py',443),
  ('gotof_dummy -> closing_par','gotof_dummy',1,'p_gotof_dummy','main.py',447),
  ('check_else -> else_goto body','check_else',2,'p_check_else','main.py',450),
  ('else_goto -> ELSE','else_goto',1,'p_else_goto','main.py',454),
  ('last_goto -> semicol','last_goto',1,'p_last_goto','main.py',459),
  ('last_goto_dummy -> semicol','last_goto_dummy',1,'p_last_goto_dummy','main.py',464),
  ('check_else -> <empty>','check_else',0,'p_check_else_empty','main.py',467),
  ('condition -> IF opening_par error gotof_dummy body check_else last_goto_dummy','condition',7,'p_condition_error','main.py',472),
]
