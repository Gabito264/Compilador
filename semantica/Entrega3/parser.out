Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    comment

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM identifier create_program semicol vars funcs MAIN complete_main body END elim_program
Rule 2     create_program -> <empty>
Rule 3     complete_main -> <empty>
Rule 4     elim_program -> <empty>
Rule 5     vars -> VAR var_definition
Rule 6     vars -> <empty>
Rule 7     var_definition -> id_list twopoint type semicol var_definition
Rule 8     var_definition -> id_list twopoint type semicol
Rule 9     id_list -> identifier comma id_list
Rule 10    id_list -> identifier
Rule 11    var_definition -> error twopoint type semicol var_definition
Rule 12    var_definition -> error twopoint type semicol
Rule 13    type -> INTEGER
Rule 14    type -> FLOAT
Rule 15    type -> STRING
Rule 16    funcs -> func funcs
Rule 17    funcs -> <empty>
Rule 18    func -> VOID identifier create_function opening_par param_list closing_par opening_brack vars create_func_quad body closing_brack semicol end_function
Rule 19    create_function -> <empty>
Rule 20    create_func_quad -> <empty>
Rule 21    end_function -> <empty>
Rule 22    param_list -> param_list comma param
Rule 23    param_list -> param
Rule 24    param_list -> <empty>
Rule 25    param -> identifier twopoint type
Rule 26    body -> opening_anglbrack statements closing_anglbrack
Rule 27    statements -> statements statement
Rule 28    statements -> statement
Rule 29    statements -> <empty>
Rule 30    statement -> assign
Rule 31    statement -> condition
Rule 32    statement -> cycle
Rule 33    statement -> f_call
Rule 34    statement -> print_statement
Rule 35    assign -> identifier op_assign expression semicol
Rule 36    assign -> identifier op_assign const_string semicol
Rule 37    assign -> identifier op_assign error semicol
Rule 38    expression -> exp
Rule 39    expression -> exp op_lesser_than exp
Rule 40    expression -> exp op_more_than exp
Rule 41    expression -> exp op_lessthan_equal exp
Rule 42    expression -> exp op_morethan_equal exp
Rule 43    expression -> exp op_equals exp
Rule 44    expression -> exp op_not_equal exp
Rule 45    exp -> exp op_plus term
Rule 46    exp -> exp op_minus term
Rule 47    exp -> term
Rule 48    term -> term op_mult factor
Rule 49    term -> term op_div factor
Rule 50    term -> factor
Rule 51    factor -> opening_par expression closing_par
Rule 52    factor -> op_plus identifier
Rule 53    factor -> op_plus cte
Rule 54    factor -> op_minus identifier
Rule 55    factor -> op_minus cte
Rule 56    factor -> identifier
Rule 57    factor -> cte
Rule 58    cte -> const_int
Rule 59    cte -> const_float
Rule 60    f_call -> identifier check_function opening_par arguments closing_par semicol make_call_quads
Rule 61    check_function -> <empty>
Rule 62    make_call_quads -> <empty>
Rule 63    arguments -> arguments comma expression
Rule 64    arguments -> expression
Rule 65    arguments -> <empty>
Rule 66    print_statement -> PRINT opening_par print_args closing_par semicol last_print
Rule 67    print_args -> print_args comma print_arg
Rule 68    print_args -> print_arg
Rule 69    print_arg -> expression
Rule 70    print_arg -> const_string
Rule 71    last_print -> <empty>
Rule 72    last_print_dummy -> <empty>
Rule 73    print_statement -> PRINT opening_par error closing_par semicol last_print_dummy
Rule 74    cycle -> DO start_cycle body WHILE opening_par expression closing_par end_cycle semicol
Rule 75    start_cycle -> <empty>
Rule 76    start_cycle_dummy -> <empty>
Rule 77    end_cycle -> <empty>
Rule 78    end_cycle_dummy -> <empty>
Rule 79    cycle -> DO start_cycle_dummy body WHILE opening_par error closing_par end_cycle_dummy semicol
Rule 80    condition -> IF opening_par expression closing_par gotof body check_else last_goto
Rule 81    gotof -> <empty>
Rule 82    gotof_dummy -> <empty>
Rule 83    check_else -> else_goto body
Rule 84    else_goto -> ELSE
Rule 85    last_goto -> semicol
Rule 86    last_goto_dummy -> semicol
Rule 87    check_else -> <empty>
Rule 88    condition -> IF opening_par error gotof_dummy body check_else last_goto_dummy

Terminals, with rules where they appear

DO                   : 74 79
ELSE                 : 84
END                  : 1
FLOAT                : 14
IF                   : 80 88
INTEGER              : 13
MAIN                 : 1
PRINT                : 66 73
PROGRAM              : 1
STRING               : 15
VAR                  : 5
VOID                 : 18
WHILE                : 74 79
closing_anglbrack    : 26
closing_brack        : 18
closing_par          : 18 51 60 66 73 74 79 80
comma                : 9 22 63 67
comment              : 
const_float          : 59
const_int            : 58
const_string         : 36 70
error                : 11 12 37 73 79 88
identifier           : 1 9 10 18 25 35 36 37 52 54 56 60
op_assign            : 35 36 37
op_div               : 49
op_equals            : 43
op_lesser_than       : 39
op_lessthan_equal    : 41
op_minus             : 46 54 55
op_more_than         : 40
op_morethan_equal    : 42
op_mult              : 48
op_not_equal         : 44
op_plus              : 45 52 53
opening_anglbrack    : 26
opening_brack        : 18
opening_par          : 18 51 60 66 73 74 79 80 88
semicol              : 1 7 8 11 12 18 35 36 37 60 66 73 74 79 85 86
twopoint             : 7 8 11 12 25

Nonterminals, with rules where they appear

arguments            : 60 63
assign               : 30
body                 : 1 18 74 79 80 83 88
check_else           : 80 88
check_function       : 60
complete_main        : 1
condition            : 31
create_func_quad     : 18
create_function      : 18
create_program       : 1
cte                  : 53 55 57
cycle                : 32
elim_program         : 1
else_goto            : 83
end_cycle            : 74
end_cycle_dummy      : 79
end_function         : 18
exp                  : 38 39 39 40 40 41 41 42 42 43 43 44 44 45 46
expression           : 35 51 63 64 69 74 80
f_call               : 33
factor               : 48 49 50
func                 : 16
funcs                : 1 16
gotof                : 80
gotof_dummy          : 88
id_list              : 7 8 9
last_goto            : 80
last_goto_dummy      : 88
last_print           : 66
last_print_dummy     : 73
make_call_quads      : 60
param                : 22 23
param_list           : 18 22
print_arg            : 67 68
print_args           : 66 67
print_statement      : 34
programa             : 0
start_cycle          : 74
start_cycle_dummy    : 79
statement            : 27 28
statements           : 26 27
term                 : 45 46 47 48 49
type                 : 7 8 11 12 25
var_definition       : 5 7 11
vars                 : 1 18

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM identifier create_program semicol vars funcs MAIN complete_main body END elim_program

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . identifier create_program semicol vars funcs MAIN complete_main body END elim_program

    identifier      shift and go to state 3


state 3

    (1) programa -> PROGRAM identifier . create_program semicol vars funcs MAIN complete_main body END elim_program
    (2) create_program -> .

    semicol         reduce using rule 2 (create_program -> .)

    create_program                 shift and go to state 4

state 4

    (1) programa -> PROGRAM identifier create_program . semicol vars funcs MAIN complete_main body END elim_program

    semicol         shift and go to state 5


state 5

    (1) programa -> PROGRAM identifier create_program semicol . vars funcs MAIN complete_main body END elim_program
    (5) vars -> . VAR var_definition
    (6) vars -> .

    VAR             shift and go to state 7
    VOID            reduce using rule 6 (vars -> .)
    MAIN            reduce using rule 6 (vars -> .)

    vars                           shift and go to state 6

state 6

    (1) programa -> PROGRAM identifier create_program semicol vars . funcs MAIN complete_main body END elim_program
    (16) funcs -> . func funcs
    (17) funcs -> .
    (18) func -> . VOID identifier create_function opening_par param_list closing_par opening_brack vars create_func_quad body closing_brack semicol end_function

    MAIN            reduce using rule 17 (funcs -> .)
    VOID            shift and go to state 10

    funcs                          shift and go to state 8
    func                           shift and go to state 9

state 7

    (5) vars -> VAR . var_definition
    (7) var_definition -> . id_list twopoint type semicol var_definition
    (8) var_definition -> . id_list twopoint type semicol
    (11) var_definition -> . error twopoint type semicol var_definition
    (12) var_definition -> . error twopoint type semicol
    (9) id_list -> . identifier comma id_list
    (10) id_list -> . identifier

    error           shift and go to state 13
    identifier      shift and go to state 14

    var_definition                 shift and go to state 11
    id_list                        shift and go to state 12

state 8

    (1) programa -> PROGRAM identifier create_program semicol vars funcs . MAIN complete_main body END elim_program

    MAIN            shift and go to state 15


state 9

    (16) funcs -> func . funcs
    (16) funcs -> . func funcs
    (17) funcs -> .
    (18) func -> . VOID identifier create_function opening_par param_list closing_par opening_brack vars create_func_quad body closing_brack semicol end_function

    MAIN            reduce using rule 17 (funcs -> .)
    VOID            shift and go to state 10

    func                           shift and go to state 9
    funcs                          shift and go to state 16

state 10

    (18) func -> VOID . identifier create_function opening_par param_list closing_par opening_brack vars create_func_quad body closing_brack semicol end_function

    identifier      shift and go to state 17


state 11

    (5) vars -> VAR var_definition .

    VOID            reduce using rule 5 (vars -> VAR var_definition .)
    MAIN            reduce using rule 5 (vars -> VAR var_definition .)
    opening_anglbrack reduce using rule 5 (vars -> VAR var_definition .)


state 12

    (7) var_definition -> id_list . twopoint type semicol var_definition
    (8) var_definition -> id_list . twopoint type semicol

    twopoint        shift and go to state 18


state 13

    (11) var_definition -> error . twopoint type semicol var_definition
    (12) var_definition -> error . twopoint type semicol

    twopoint        shift and go to state 19


state 14

    (9) id_list -> identifier . comma id_list
    (10) id_list -> identifier .

    comma           shift and go to state 20
    twopoint        reduce using rule 10 (id_list -> identifier .)


state 15

    (1) programa -> PROGRAM identifier create_program semicol vars funcs MAIN . complete_main body END elim_program
    (3) complete_main -> .

    opening_anglbrack reduce using rule 3 (complete_main -> .)

    complete_main                  shift and go to state 21

state 16

    (16) funcs -> func funcs .

    MAIN            reduce using rule 16 (funcs -> func funcs .)


state 17

    (18) func -> VOID identifier . create_function opening_par param_list closing_par opening_brack vars create_func_quad body closing_brack semicol end_function
    (19) create_function -> .

    opening_par     reduce using rule 19 (create_function -> .)

    create_function                shift and go to state 22

state 18

    (7) var_definition -> id_list twopoint . type semicol var_definition
    (8) var_definition -> id_list twopoint . type semicol
    (13) type -> . INTEGER
    (14) type -> . FLOAT
    (15) type -> . STRING

    INTEGER         shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26

    type                           shift and go to state 23

state 19

    (11) var_definition -> error twopoint . type semicol var_definition
    (12) var_definition -> error twopoint . type semicol
    (13) type -> . INTEGER
    (14) type -> . FLOAT
    (15) type -> . STRING

    INTEGER         shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26

    type                           shift and go to state 27

state 20

    (9) id_list -> identifier comma . id_list
    (9) id_list -> . identifier comma id_list
    (10) id_list -> . identifier

    identifier      shift and go to state 14

    id_list                        shift and go to state 28

state 21

    (1) programa -> PROGRAM identifier create_program semicol vars funcs MAIN complete_main . body END elim_program
    (26) body -> . opening_anglbrack statements closing_anglbrack

    opening_anglbrack shift and go to state 30

    body                           shift and go to state 29

state 22

    (18) func -> VOID identifier create_function . opening_par param_list closing_par opening_brack vars create_func_quad body closing_brack semicol end_function

    opening_par     shift and go to state 31


state 23

    (7) var_definition -> id_list twopoint type . semicol var_definition
    (8) var_definition -> id_list twopoint type . semicol

    semicol         shift and go to state 32


state 24

    (13) type -> INTEGER .

    semicol         reduce using rule 13 (type -> INTEGER .)
    closing_par     reduce using rule 13 (type -> INTEGER .)
    comma           reduce using rule 13 (type -> INTEGER .)


state 25

    (14) type -> FLOAT .

    semicol         reduce using rule 14 (type -> FLOAT .)
    closing_par     reduce using rule 14 (type -> FLOAT .)
    comma           reduce using rule 14 (type -> FLOAT .)


state 26

    (15) type -> STRING .

    semicol         reduce using rule 15 (type -> STRING .)
    closing_par     reduce using rule 15 (type -> STRING .)
    comma           reduce using rule 15 (type -> STRING .)


state 27

    (11) var_definition -> error twopoint type . semicol var_definition
    (12) var_definition -> error twopoint type . semicol

    semicol         shift and go to state 33


state 28

    (9) id_list -> identifier comma id_list .

    twopoint        reduce using rule 9 (id_list -> identifier comma id_list .)


state 29

    (1) programa -> PROGRAM identifier create_program semicol vars funcs MAIN complete_main body . END elim_program

    END             shift and go to state 34


state 30

    (26) body -> opening_anglbrack . statements closing_anglbrack
    (27) statements -> . statements statement
    (28) statements -> . statement
    (29) statements -> .
    (30) statement -> . assign
    (31) statement -> . condition
    (32) statement -> . cycle
    (33) statement -> . f_call
    (34) statement -> . print_statement
    (35) assign -> . identifier op_assign expression semicol
    (36) assign -> . identifier op_assign const_string semicol
    (37) assign -> . identifier op_assign error semicol
    (80) condition -> . IF opening_par expression closing_par gotof body check_else last_goto
    (88) condition -> . IF opening_par error gotof_dummy body check_else last_goto_dummy
    (74) cycle -> . DO start_cycle body WHILE opening_par expression closing_par end_cycle semicol
    (79) cycle -> . DO start_cycle_dummy body WHILE opening_par error closing_par end_cycle_dummy semicol
    (60) f_call -> . identifier check_function opening_par arguments closing_par semicol make_call_quads
    (66) print_statement -> . PRINT opening_par print_args closing_par semicol last_print
    (73) print_statement -> . PRINT opening_par error closing_par semicol last_print_dummy

  ! shift/reduce conflict for identifier resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    closing_anglbrack reduce using rule 29 (statements -> .)
    identifier      shift and go to state 42
    IF              shift and go to state 43
    DO              shift and go to state 44
    PRINT           shift and go to state 45

  ! identifier      [ reduce using rule 29 (statements -> .) ]
  ! IF              [ reduce using rule 29 (statements -> .) ]
  ! DO              [ reduce using rule 29 (statements -> .) ]
  ! PRINT           [ reduce using rule 29 (statements -> .) ]

    statements                     shift and go to state 35
    statement                      shift and go to state 36
    assign                         shift and go to state 37
    condition                      shift and go to state 38
    cycle                          shift and go to state 39
    f_call                         shift and go to state 40
    print_statement                shift and go to state 41

state 31

    (18) func -> VOID identifier create_function opening_par . param_list closing_par opening_brack vars create_func_quad body closing_brack semicol end_function
    (22) param_list -> . param_list comma param
    (23) param_list -> . param
    (24) param_list -> .
    (25) param -> . identifier twopoint type

    closing_par     reduce using rule 24 (param_list -> .)
    comma           reduce using rule 24 (param_list -> .)
    identifier      shift and go to state 46

    param_list                     shift and go to state 47
    param                          shift and go to state 48

state 32

    (7) var_definition -> id_list twopoint type semicol . var_definition
    (8) var_definition -> id_list twopoint type semicol .
    (7) var_definition -> . id_list twopoint type semicol var_definition
    (8) var_definition -> . id_list twopoint type semicol
    (11) var_definition -> . error twopoint type semicol var_definition
    (12) var_definition -> . error twopoint type semicol
    (9) id_list -> . identifier comma id_list
    (10) id_list -> . identifier

    VOID            reduce using rule 8 (var_definition -> id_list twopoint type semicol .)
    MAIN            reduce using rule 8 (var_definition -> id_list twopoint type semicol .)
    opening_anglbrack reduce using rule 8 (var_definition -> id_list twopoint type semicol .)
    error           shift and go to state 13
    identifier      shift and go to state 14

    id_list                        shift and go to state 12
    var_definition                 shift and go to state 49

state 33

    (11) var_definition -> error twopoint type semicol . var_definition
    (12) var_definition -> error twopoint type semicol .
    (7) var_definition -> . id_list twopoint type semicol var_definition
    (8) var_definition -> . id_list twopoint type semicol
    (11) var_definition -> . error twopoint type semicol var_definition
    (12) var_definition -> . error twopoint type semicol
    (9) id_list -> . identifier comma id_list
    (10) id_list -> . identifier

    VOID            reduce using rule 12 (var_definition -> error twopoint type semicol .)
    MAIN            reduce using rule 12 (var_definition -> error twopoint type semicol .)
    opening_anglbrack reduce using rule 12 (var_definition -> error twopoint type semicol .)
    error           shift and go to state 13
    identifier      shift and go to state 14

    var_definition                 shift and go to state 50
    id_list                        shift and go to state 12

state 34

    (1) programa -> PROGRAM identifier create_program semicol vars funcs MAIN complete_main body END . elim_program
    (4) elim_program -> .

    $end            reduce using rule 4 (elim_program -> .)

    elim_program                   shift and go to state 51

state 35

    (26) body -> opening_anglbrack statements . closing_anglbrack
    (27) statements -> statements . statement
    (30) statement -> . assign
    (31) statement -> . condition
    (32) statement -> . cycle
    (33) statement -> . f_call
    (34) statement -> . print_statement
    (35) assign -> . identifier op_assign expression semicol
    (36) assign -> . identifier op_assign const_string semicol
    (37) assign -> . identifier op_assign error semicol
    (80) condition -> . IF opening_par expression closing_par gotof body check_else last_goto
    (88) condition -> . IF opening_par error gotof_dummy body check_else last_goto_dummy
    (74) cycle -> . DO start_cycle body WHILE opening_par expression closing_par end_cycle semicol
    (79) cycle -> . DO start_cycle_dummy body WHILE opening_par error closing_par end_cycle_dummy semicol
    (60) f_call -> . identifier check_function opening_par arguments closing_par semicol make_call_quads
    (66) print_statement -> . PRINT opening_par print_args closing_par semicol last_print
    (73) print_statement -> . PRINT opening_par error closing_par semicol last_print_dummy

    closing_anglbrack shift and go to state 52
    identifier      shift and go to state 42
    IF              shift and go to state 43
    DO              shift and go to state 44
    PRINT           shift and go to state 45

    statement                      shift and go to state 53
    assign                         shift and go to state 37
    condition                      shift and go to state 38
    cycle                          shift and go to state 39
    f_call                         shift and go to state 40
    print_statement                shift and go to state 41

state 36

    (28) statements -> statement .

    closing_anglbrack reduce using rule 28 (statements -> statement .)
    identifier      reduce using rule 28 (statements -> statement .)
    IF              reduce using rule 28 (statements -> statement .)
    DO              reduce using rule 28 (statements -> statement .)
    PRINT           reduce using rule 28 (statements -> statement .)


state 37

    (30) statement -> assign .

    closing_anglbrack reduce using rule 30 (statement -> assign .)
    identifier      reduce using rule 30 (statement -> assign .)
    IF              reduce using rule 30 (statement -> assign .)
    DO              reduce using rule 30 (statement -> assign .)
    PRINT           reduce using rule 30 (statement -> assign .)


state 38

    (31) statement -> condition .

    closing_anglbrack reduce using rule 31 (statement -> condition .)
    identifier      reduce using rule 31 (statement -> condition .)
    IF              reduce using rule 31 (statement -> condition .)
    DO              reduce using rule 31 (statement -> condition .)
    PRINT           reduce using rule 31 (statement -> condition .)


state 39

    (32) statement -> cycle .

    closing_anglbrack reduce using rule 32 (statement -> cycle .)
    identifier      reduce using rule 32 (statement -> cycle .)
    IF              reduce using rule 32 (statement -> cycle .)
    DO              reduce using rule 32 (statement -> cycle .)
    PRINT           reduce using rule 32 (statement -> cycle .)


state 40

    (33) statement -> f_call .

    closing_anglbrack reduce using rule 33 (statement -> f_call .)
    identifier      reduce using rule 33 (statement -> f_call .)
    IF              reduce using rule 33 (statement -> f_call .)
    DO              reduce using rule 33 (statement -> f_call .)
    PRINT           reduce using rule 33 (statement -> f_call .)


state 41

    (34) statement -> print_statement .

    closing_anglbrack reduce using rule 34 (statement -> print_statement .)
    identifier      reduce using rule 34 (statement -> print_statement .)
    IF              reduce using rule 34 (statement -> print_statement .)
    DO              reduce using rule 34 (statement -> print_statement .)
    PRINT           reduce using rule 34 (statement -> print_statement .)


state 42

    (35) assign -> identifier . op_assign expression semicol
    (36) assign -> identifier . op_assign const_string semicol
    (37) assign -> identifier . op_assign error semicol
    (60) f_call -> identifier . check_function opening_par arguments closing_par semicol make_call_quads
    (61) check_function -> .

    op_assign       shift and go to state 54
    opening_par     reduce using rule 61 (check_function -> .)

    check_function                 shift and go to state 55

state 43

    (80) condition -> IF . opening_par expression closing_par gotof body check_else last_goto
    (88) condition -> IF . opening_par error gotof_dummy body check_else last_goto_dummy

    opening_par     shift and go to state 56


state 44

    (74) cycle -> DO . start_cycle body WHILE opening_par expression closing_par end_cycle semicol
    (79) cycle -> DO . start_cycle_dummy body WHILE opening_par error closing_par end_cycle_dummy semicol
    (75) start_cycle -> .
    (76) start_cycle_dummy -> .

  ! reduce/reduce conflict for opening_anglbrack resolved using rule 75 (start_cycle -> .)
    opening_anglbrack reduce using rule 75 (start_cycle -> .)

  ! opening_anglbrack [ reduce using rule 76 (start_cycle_dummy -> .) ]

    start_cycle                    shift and go to state 57
    start_cycle_dummy              shift and go to state 58

state 45

    (66) print_statement -> PRINT . opening_par print_args closing_par semicol last_print
    (73) print_statement -> PRINT . opening_par error closing_par semicol last_print_dummy

    opening_par     shift and go to state 59


state 46

    (25) param -> identifier . twopoint type

    twopoint        shift and go to state 60


state 47

    (18) func -> VOID identifier create_function opening_par param_list . closing_par opening_brack vars create_func_quad body closing_brack semicol end_function
    (22) param_list -> param_list . comma param

    closing_par     shift and go to state 61
    comma           shift and go to state 62


state 48

    (23) param_list -> param .

    closing_par     reduce using rule 23 (param_list -> param .)
    comma           reduce using rule 23 (param_list -> param .)


state 49

    (7) var_definition -> id_list twopoint type semicol var_definition .

    VOID            reduce using rule 7 (var_definition -> id_list twopoint type semicol var_definition .)
    MAIN            reduce using rule 7 (var_definition -> id_list twopoint type semicol var_definition .)
    opening_anglbrack reduce using rule 7 (var_definition -> id_list twopoint type semicol var_definition .)


state 50

    (11) var_definition -> error twopoint type semicol var_definition .

    VOID            reduce using rule 11 (var_definition -> error twopoint type semicol var_definition .)
    MAIN            reduce using rule 11 (var_definition -> error twopoint type semicol var_definition .)
    opening_anglbrack reduce using rule 11 (var_definition -> error twopoint type semicol var_definition .)


state 51

    (1) programa -> PROGRAM identifier create_program semicol vars funcs MAIN complete_main body END elim_program .

    $end            reduce using rule 1 (programa -> PROGRAM identifier create_program semicol vars funcs MAIN complete_main body END elim_program .)


state 52

    (26) body -> opening_anglbrack statements closing_anglbrack .

    END             reduce using rule 26 (body -> opening_anglbrack statements closing_anglbrack .)
    WHILE           reduce using rule 26 (body -> opening_anglbrack statements closing_anglbrack .)
    ELSE            reduce using rule 26 (body -> opening_anglbrack statements closing_anglbrack .)
    semicol         reduce using rule 26 (body -> opening_anglbrack statements closing_anglbrack .)
    closing_brack   reduce using rule 26 (body -> opening_anglbrack statements closing_anglbrack .)


state 53

    (27) statements -> statements statement .

    closing_anglbrack reduce using rule 27 (statements -> statements statement .)
    identifier      reduce using rule 27 (statements -> statements statement .)
    IF              reduce using rule 27 (statements -> statements statement .)
    DO              reduce using rule 27 (statements -> statements statement .)
    PRINT           reduce using rule 27 (statements -> statements statement .)


state 54

    (35) assign -> identifier op_assign . expression semicol
    (36) assign -> identifier op_assign . const_string semicol
    (37) assign -> identifier op_assign . error semicol
    (38) expression -> . exp
    (39) expression -> . exp op_lesser_than exp
    (40) expression -> . exp op_more_than exp
    (41) expression -> . exp op_lessthan_equal exp
    (42) expression -> . exp op_morethan_equal exp
    (43) expression -> . exp op_equals exp
    (44) expression -> . exp op_not_equal exp
    (45) exp -> . exp op_plus term
    (46) exp -> . exp op_minus term
    (47) exp -> . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    const_string    shift and go to state 65
    error           shift and go to state 66
    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    expression                     shift and go to state 64
    exp                            shift and go to state 67
    term                           shift and go to state 69
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 55

    (60) f_call -> identifier check_function . opening_par arguments closing_par semicol make_call_quads

    opening_par     shift and go to state 76


state 56

    (80) condition -> IF opening_par . expression closing_par gotof body check_else last_goto
    (88) condition -> IF opening_par . error gotof_dummy body check_else last_goto_dummy
    (38) expression -> . exp
    (39) expression -> . exp op_lesser_than exp
    (40) expression -> . exp op_more_than exp
    (41) expression -> . exp op_lessthan_equal exp
    (42) expression -> . exp op_morethan_equal exp
    (43) expression -> . exp op_equals exp
    (44) expression -> . exp op_not_equal exp
    (45) exp -> . exp op_plus term
    (46) exp -> . exp op_minus term
    (47) exp -> . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    error           shift and go to state 78
    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    expression                     shift and go to state 77
    exp                            shift and go to state 67
    term                           shift and go to state 69
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 57

    (74) cycle -> DO start_cycle . body WHILE opening_par expression closing_par end_cycle semicol
    (26) body -> . opening_anglbrack statements closing_anglbrack

    opening_anglbrack shift and go to state 30

    body                           shift and go to state 79

state 58

    (79) cycle -> DO start_cycle_dummy . body WHILE opening_par error closing_par end_cycle_dummy semicol
    (26) body -> . opening_anglbrack statements closing_anglbrack

    opening_anglbrack shift and go to state 30

    body                           shift and go to state 80

state 59

    (66) print_statement -> PRINT opening_par . print_args closing_par semicol last_print
    (73) print_statement -> PRINT opening_par . error closing_par semicol last_print_dummy
    (67) print_args -> . print_args comma print_arg
    (68) print_args -> . print_arg
    (69) print_arg -> . expression
    (70) print_arg -> . const_string
    (38) expression -> . exp
    (39) expression -> . exp op_lesser_than exp
    (40) expression -> . exp op_more_than exp
    (41) expression -> . exp op_lessthan_equal exp
    (42) expression -> . exp op_morethan_equal exp
    (43) expression -> . exp op_equals exp
    (44) expression -> . exp op_not_equal exp
    (45) exp -> . exp op_plus term
    (46) exp -> . exp op_minus term
    (47) exp -> . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    error           shift and go to state 82
    const_string    shift and go to state 85
    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    print_args                     shift and go to state 81
    print_arg                      shift and go to state 83
    expression                     shift and go to state 84
    exp                            shift and go to state 67
    term                           shift and go to state 69
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 60

    (25) param -> identifier twopoint . type
    (13) type -> . INTEGER
    (14) type -> . FLOAT
    (15) type -> . STRING

    INTEGER         shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26

    type                           shift and go to state 86

state 61

    (18) func -> VOID identifier create_function opening_par param_list closing_par . opening_brack vars create_func_quad body closing_brack semicol end_function

    opening_brack   shift and go to state 87


state 62

    (22) param_list -> param_list comma . param
    (25) param -> . identifier twopoint type

    identifier      shift and go to state 46

    param                          shift and go to state 88

state 63

    (56) factor -> identifier .

    op_mult         reduce using rule 56 (factor -> identifier .)
    op_div          reduce using rule 56 (factor -> identifier .)
    op_lesser_than  reduce using rule 56 (factor -> identifier .)
    op_more_than    reduce using rule 56 (factor -> identifier .)
    op_lessthan_equal reduce using rule 56 (factor -> identifier .)
    op_morethan_equal reduce using rule 56 (factor -> identifier .)
    op_equals       reduce using rule 56 (factor -> identifier .)
    op_not_equal    reduce using rule 56 (factor -> identifier .)
    op_plus         reduce using rule 56 (factor -> identifier .)
    op_minus        reduce using rule 56 (factor -> identifier .)
    semicol         reduce using rule 56 (factor -> identifier .)
    closing_par     reduce using rule 56 (factor -> identifier .)
    comma           reduce using rule 56 (factor -> identifier .)


state 64

    (35) assign -> identifier op_assign expression . semicol

    semicol         shift and go to state 89


state 65

    (36) assign -> identifier op_assign const_string . semicol

    semicol         shift and go to state 90


state 66

    (37) assign -> identifier op_assign error . semicol

    semicol         shift and go to state 91


state 67

    (38) expression -> exp .
    (39) expression -> exp . op_lesser_than exp
    (40) expression -> exp . op_more_than exp
    (41) expression -> exp . op_lessthan_equal exp
    (42) expression -> exp . op_morethan_equal exp
    (43) expression -> exp . op_equals exp
    (44) expression -> exp . op_not_equal exp
    (45) exp -> exp . op_plus term
    (46) exp -> exp . op_minus term

    semicol         reduce using rule 38 (expression -> exp .)
    closing_par     reduce using rule 38 (expression -> exp .)
    comma           reduce using rule 38 (expression -> exp .)
    op_lesser_than  shift and go to state 92
    op_more_than    shift and go to state 93
    op_lessthan_equal shift and go to state 94
    op_morethan_equal shift and go to state 95
    op_equals       shift and go to state 96
    op_not_equal    shift and go to state 97
    op_plus         shift and go to state 98
    op_minus        shift and go to state 99


state 68

    (52) factor -> op_plus . identifier
    (53) factor -> op_plus . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    identifier      shift and go to state 100
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    cte                            shift and go to state 101

state 69

    (47) exp -> term .
    (48) term -> term . op_mult factor
    (49) term -> term . op_div factor

    op_lesser_than  reduce using rule 47 (exp -> term .)
    op_more_than    reduce using rule 47 (exp -> term .)
    op_lessthan_equal reduce using rule 47 (exp -> term .)
    op_morethan_equal reduce using rule 47 (exp -> term .)
    op_equals       reduce using rule 47 (exp -> term .)
    op_not_equal    reduce using rule 47 (exp -> term .)
    op_plus         reduce using rule 47 (exp -> term .)
    op_minus        reduce using rule 47 (exp -> term .)
    semicol         reduce using rule 47 (exp -> term .)
    closing_par     reduce using rule 47 (exp -> term .)
    comma           reduce using rule 47 (exp -> term .)
    op_mult         shift and go to state 102
    op_div          shift and go to state 103


state 70

    (54) factor -> op_minus . identifier
    (55) factor -> op_minus . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    identifier      shift and go to state 104
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    cte                            shift and go to state 105

state 71

    (50) term -> factor .

    op_mult         reduce using rule 50 (term -> factor .)
    op_div          reduce using rule 50 (term -> factor .)
    op_lesser_than  reduce using rule 50 (term -> factor .)
    op_more_than    reduce using rule 50 (term -> factor .)
    op_lessthan_equal reduce using rule 50 (term -> factor .)
    op_morethan_equal reduce using rule 50 (term -> factor .)
    op_equals       reduce using rule 50 (term -> factor .)
    op_not_equal    reduce using rule 50 (term -> factor .)
    op_plus         reduce using rule 50 (term -> factor .)
    op_minus        reduce using rule 50 (term -> factor .)
    semicol         reduce using rule 50 (term -> factor .)
    closing_par     reduce using rule 50 (term -> factor .)
    comma           reduce using rule 50 (term -> factor .)


state 72

    (51) factor -> opening_par . expression closing_par
    (38) expression -> . exp
    (39) expression -> . exp op_lesser_than exp
    (40) expression -> . exp op_more_than exp
    (41) expression -> . exp op_lessthan_equal exp
    (42) expression -> . exp op_morethan_equal exp
    (43) expression -> . exp op_equals exp
    (44) expression -> . exp op_not_equal exp
    (45) exp -> . exp op_plus term
    (46) exp -> . exp op_minus term
    (47) exp -> . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    expression                     shift and go to state 106
    exp                            shift and go to state 67
    term                           shift and go to state 69
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 73

    (57) factor -> cte .

    op_mult         reduce using rule 57 (factor -> cte .)
    op_div          reduce using rule 57 (factor -> cte .)
    op_lesser_than  reduce using rule 57 (factor -> cte .)
    op_more_than    reduce using rule 57 (factor -> cte .)
    op_lessthan_equal reduce using rule 57 (factor -> cte .)
    op_morethan_equal reduce using rule 57 (factor -> cte .)
    op_equals       reduce using rule 57 (factor -> cte .)
    op_not_equal    reduce using rule 57 (factor -> cte .)
    op_plus         reduce using rule 57 (factor -> cte .)
    op_minus        reduce using rule 57 (factor -> cte .)
    semicol         reduce using rule 57 (factor -> cte .)
    closing_par     reduce using rule 57 (factor -> cte .)
    comma           reduce using rule 57 (factor -> cte .)


state 74

    (58) cte -> const_int .

    op_mult         reduce using rule 58 (cte -> const_int .)
    op_div          reduce using rule 58 (cte -> const_int .)
    op_lesser_than  reduce using rule 58 (cte -> const_int .)
    op_more_than    reduce using rule 58 (cte -> const_int .)
    op_lessthan_equal reduce using rule 58 (cte -> const_int .)
    op_morethan_equal reduce using rule 58 (cte -> const_int .)
    op_equals       reduce using rule 58 (cte -> const_int .)
    op_not_equal    reduce using rule 58 (cte -> const_int .)
    op_plus         reduce using rule 58 (cte -> const_int .)
    op_minus        reduce using rule 58 (cte -> const_int .)
    semicol         reduce using rule 58 (cte -> const_int .)
    closing_par     reduce using rule 58 (cte -> const_int .)
    comma           reduce using rule 58 (cte -> const_int .)


state 75

    (59) cte -> const_float .

    op_mult         reduce using rule 59 (cte -> const_float .)
    op_div          reduce using rule 59 (cte -> const_float .)
    op_lesser_than  reduce using rule 59 (cte -> const_float .)
    op_more_than    reduce using rule 59 (cte -> const_float .)
    op_lessthan_equal reduce using rule 59 (cte -> const_float .)
    op_morethan_equal reduce using rule 59 (cte -> const_float .)
    op_equals       reduce using rule 59 (cte -> const_float .)
    op_not_equal    reduce using rule 59 (cte -> const_float .)
    op_plus         reduce using rule 59 (cte -> const_float .)
    op_minus        reduce using rule 59 (cte -> const_float .)
    semicol         reduce using rule 59 (cte -> const_float .)
    closing_par     reduce using rule 59 (cte -> const_float .)
    comma           reduce using rule 59 (cte -> const_float .)


state 76

    (60) f_call -> identifier check_function opening_par . arguments closing_par semicol make_call_quads
    (63) arguments -> . arguments comma expression
    (64) arguments -> . expression
    (65) arguments -> .
    (38) expression -> . exp
    (39) expression -> . exp op_lesser_than exp
    (40) expression -> . exp op_more_than exp
    (41) expression -> . exp op_lessthan_equal exp
    (42) expression -> . exp op_morethan_equal exp
    (43) expression -> . exp op_equals exp
    (44) expression -> . exp op_not_equal exp
    (45) exp -> . exp op_plus term
    (46) exp -> . exp op_minus term
    (47) exp -> . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    closing_par     reduce using rule 65 (arguments -> .)
    comma           reduce using rule 65 (arguments -> .)
    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    arguments                      shift and go to state 107
    expression                     shift and go to state 108
    exp                            shift and go to state 67
    term                           shift and go to state 69
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 77

    (80) condition -> IF opening_par expression . closing_par gotof body check_else last_goto

    closing_par     shift and go to state 109


state 78

    (88) condition -> IF opening_par error . gotof_dummy body check_else last_goto_dummy
    (82) gotof_dummy -> .

    opening_anglbrack reduce using rule 82 (gotof_dummy -> .)

    gotof_dummy                    shift and go to state 110

state 79

    (74) cycle -> DO start_cycle body . WHILE opening_par expression closing_par end_cycle semicol

    WHILE           shift and go to state 111


state 80

    (79) cycle -> DO start_cycle_dummy body . WHILE opening_par error closing_par end_cycle_dummy semicol

    WHILE           shift and go to state 112


state 81

    (66) print_statement -> PRINT opening_par print_args . closing_par semicol last_print
    (67) print_args -> print_args . comma print_arg

    closing_par     shift and go to state 113
    comma           shift and go to state 114


state 82

    (73) print_statement -> PRINT opening_par error . closing_par semicol last_print_dummy

    closing_par     shift and go to state 115


state 83

    (68) print_args -> print_arg .

    closing_par     reduce using rule 68 (print_args -> print_arg .)
    comma           reduce using rule 68 (print_args -> print_arg .)


state 84

    (69) print_arg -> expression .

    closing_par     reduce using rule 69 (print_arg -> expression .)
    comma           reduce using rule 69 (print_arg -> expression .)


state 85

    (70) print_arg -> const_string .

    closing_par     reduce using rule 70 (print_arg -> const_string .)
    comma           reduce using rule 70 (print_arg -> const_string .)


state 86

    (25) param -> identifier twopoint type .

    closing_par     reduce using rule 25 (param -> identifier twopoint type .)
    comma           reduce using rule 25 (param -> identifier twopoint type .)


state 87

    (18) func -> VOID identifier create_function opening_par param_list closing_par opening_brack . vars create_func_quad body closing_brack semicol end_function
    (5) vars -> . VAR var_definition
    (6) vars -> .

    VAR             shift and go to state 7
    opening_anglbrack reduce using rule 6 (vars -> .)

    vars                           shift and go to state 116

state 88

    (22) param_list -> param_list comma param .

    closing_par     reduce using rule 22 (param_list -> param_list comma param .)
    comma           reduce using rule 22 (param_list -> param_list comma param .)


state 89

    (35) assign -> identifier op_assign expression semicol .

    closing_anglbrack reduce using rule 35 (assign -> identifier op_assign expression semicol .)
    identifier      reduce using rule 35 (assign -> identifier op_assign expression semicol .)
    IF              reduce using rule 35 (assign -> identifier op_assign expression semicol .)
    DO              reduce using rule 35 (assign -> identifier op_assign expression semicol .)
    PRINT           reduce using rule 35 (assign -> identifier op_assign expression semicol .)


state 90

    (36) assign -> identifier op_assign const_string semicol .

    closing_anglbrack reduce using rule 36 (assign -> identifier op_assign const_string semicol .)
    identifier      reduce using rule 36 (assign -> identifier op_assign const_string semicol .)
    IF              reduce using rule 36 (assign -> identifier op_assign const_string semicol .)
    DO              reduce using rule 36 (assign -> identifier op_assign const_string semicol .)
    PRINT           reduce using rule 36 (assign -> identifier op_assign const_string semicol .)


state 91

    (37) assign -> identifier op_assign error semicol .

    closing_anglbrack reduce using rule 37 (assign -> identifier op_assign error semicol .)
    identifier      reduce using rule 37 (assign -> identifier op_assign error semicol .)
    IF              reduce using rule 37 (assign -> identifier op_assign error semicol .)
    DO              reduce using rule 37 (assign -> identifier op_assign error semicol .)
    PRINT           reduce using rule 37 (assign -> identifier op_assign error semicol .)


state 92

    (39) expression -> exp op_lesser_than . exp
    (45) exp -> . exp op_plus term
    (46) exp -> . exp op_minus term
    (47) exp -> . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    exp                            shift and go to state 117
    term                           shift and go to state 69
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 93

    (40) expression -> exp op_more_than . exp
    (45) exp -> . exp op_plus term
    (46) exp -> . exp op_minus term
    (47) exp -> . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    exp                            shift and go to state 118
    term                           shift and go to state 69
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 94

    (41) expression -> exp op_lessthan_equal . exp
    (45) exp -> . exp op_plus term
    (46) exp -> . exp op_minus term
    (47) exp -> . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    exp                            shift and go to state 119
    term                           shift and go to state 69
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 95

    (42) expression -> exp op_morethan_equal . exp
    (45) exp -> . exp op_plus term
    (46) exp -> . exp op_minus term
    (47) exp -> . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    exp                            shift and go to state 120
    term                           shift and go to state 69
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 96

    (43) expression -> exp op_equals . exp
    (45) exp -> . exp op_plus term
    (46) exp -> . exp op_minus term
    (47) exp -> . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    exp                            shift and go to state 121
    term                           shift and go to state 69
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 97

    (44) expression -> exp op_not_equal . exp
    (45) exp -> . exp op_plus term
    (46) exp -> . exp op_minus term
    (47) exp -> . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    exp                            shift and go to state 122
    term                           shift and go to state 69
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 98

    (45) exp -> exp op_plus . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    term                           shift and go to state 123
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 99

    (46) exp -> exp op_minus . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    term                           shift and go to state 124
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 100

    (52) factor -> op_plus identifier .

    op_mult         reduce using rule 52 (factor -> op_plus identifier .)
    op_div          reduce using rule 52 (factor -> op_plus identifier .)
    op_lesser_than  reduce using rule 52 (factor -> op_plus identifier .)
    op_more_than    reduce using rule 52 (factor -> op_plus identifier .)
    op_lessthan_equal reduce using rule 52 (factor -> op_plus identifier .)
    op_morethan_equal reduce using rule 52 (factor -> op_plus identifier .)
    op_equals       reduce using rule 52 (factor -> op_plus identifier .)
    op_not_equal    reduce using rule 52 (factor -> op_plus identifier .)
    op_plus         reduce using rule 52 (factor -> op_plus identifier .)
    op_minus        reduce using rule 52 (factor -> op_plus identifier .)
    semicol         reduce using rule 52 (factor -> op_plus identifier .)
    closing_par     reduce using rule 52 (factor -> op_plus identifier .)
    comma           reduce using rule 52 (factor -> op_plus identifier .)


state 101

    (53) factor -> op_plus cte .

    op_mult         reduce using rule 53 (factor -> op_plus cte .)
    op_div          reduce using rule 53 (factor -> op_plus cte .)
    op_lesser_than  reduce using rule 53 (factor -> op_plus cte .)
    op_more_than    reduce using rule 53 (factor -> op_plus cte .)
    op_lessthan_equal reduce using rule 53 (factor -> op_plus cte .)
    op_morethan_equal reduce using rule 53 (factor -> op_plus cte .)
    op_equals       reduce using rule 53 (factor -> op_plus cte .)
    op_not_equal    reduce using rule 53 (factor -> op_plus cte .)
    op_plus         reduce using rule 53 (factor -> op_plus cte .)
    op_minus        reduce using rule 53 (factor -> op_plus cte .)
    semicol         reduce using rule 53 (factor -> op_plus cte .)
    closing_par     reduce using rule 53 (factor -> op_plus cte .)
    comma           reduce using rule 53 (factor -> op_plus cte .)


state 102

    (48) term -> term op_mult . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    factor                         shift and go to state 125
    cte                            shift and go to state 73

state 103

    (49) term -> term op_div . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    factor                         shift and go to state 126
    cte                            shift and go to state 73

state 104

    (54) factor -> op_minus identifier .

    op_mult         reduce using rule 54 (factor -> op_minus identifier .)
    op_div          reduce using rule 54 (factor -> op_minus identifier .)
    op_lesser_than  reduce using rule 54 (factor -> op_minus identifier .)
    op_more_than    reduce using rule 54 (factor -> op_minus identifier .)
    op_lessthan_equal reduce using rule 54 (factor -> op_minus identifier .)
    op_morethan_equal reduce using rule 54 (factor -> op_minus identifier .)
    op_equals       reduce using rule 54 (factor -> op_minus identifier .)
    op_not_equal    reduce using rule 54 (factor -> op_minus identifier .)
    op_plus         reduce using rule 54 (factor -> op_minus identifier .)
    op_minus        reduce using rule 54 (factor -> op_minus identifier .)
    semicol         reduce using rule 54 (factor -> op_minus identifier .)
    closing_par     reduce using rule 54 (factor -> op_minus identifier .)
    comma           reduce using rule 54 (factor -> op_minus identifier .)


state 105

    (55) factor -> op_minus cte .

    op_mult         reduce using rule 55 (factor -> op_minus cte .)
    op_div          reduce using rule 55 (factor -> op_minus cte .)
    op_lesser_than  reduce using rule 55 (factor -> op_minus cte .)
    op_more_than    reduce using rule 55 (factor -> op_minus cte .)
    op_lessthan_equal reduce using rule 55 (factor -> op_minus cte .)
    op_morethan_equal reduce using rule 55 (factor -> op_minus cte .)
    op_equals       reduce using rule 55 (factor -> op_minus cte .)
    op_not_equal    reduce using rule 55 (factor -> op_minus cte .)
    op_plus         reduce using rule 55 (factor -> op_minus cte .)
    op_minus        reduce using rule 55 (factor -> op_minus cte .)
    semicol         reduce using rule 55 (factor -> op_minus cte .)
    closing_par     reduce using rule 55 (factor -> op_minus cte .)
    comma           reduce using rule 55 (factor -> op_minus cte .)


state 106

    (51) factor -> opening_par expression . closing_par

    closing_par     shift and go to state 127


state 107

    (60) f_call -> identifier check_function opening_par arguments . closing_par semicol make_call_quads
    (63) arguments -> arguments . comma expression

    closing_par     shift and go to state 128
    comma           shift and go to state 129


state 108

    (64) arguments -> expression .

    closing_par     reduce using rule 64 (arguments -> expression .)
    comma           reduce using rule 64 (arguments -> expression .)


state 109

    (80) condition -> IF opening_par expression closing_par . gotof body check_else last_goto
    (81) gotof -> .

    opening_anglbrack reduce using rule 81 (gotof -> .)

    gotof                          shift and go to state 130

state 110

    (88) condition -> IF opening_par error gotof_dummy . body check_else last_goto_dummy
    (26) body -> . opening_anglbrack statements closing_anglbrack

    opening_anglbrack shift and go to state 30

    body                           shift and go to state 131

state 111

    (74) cycle -> DO start_cycle body WHILE . opening_par expression closing_par end_cycle semicol

    opening_par     shift and go to state 132


state 112

    (79) cycle -> DO start_cycle_dummy body WHILE . opening_par error closing_par end_cycle_dummy semicol

    opening_par     shift and go to state 133


state 113

    (66) print_statement -> PRINT opening_par print_args closing_par . semicol last_print

    semicol         shift and go to state 134


state 114

    (67) print_args -> print_args comma . print_arg
    (69) print_arg -> . expression
    (70) print_arg -> . const_string
    (38) expression -> . exp
    (39) expression -> . exp op_lesser_than exp
    (40) expression -> . exp op_more_than exp
    (41) expression -> . exp op_lessthan_equal exp
    (42) expression -> . exp op_morethan_equal exp
    (43) expression -> . exp op_equals exp
    (44) expression -> . exp op_not_equal exp
    (45) exp -> . exp op_plus term
    (46) exp -> . exp op_minus term
    (47) exp -> . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    const_string    shift and go to state 85
    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    print_arg                      shift and go to state 135
    expression                     shift and go to state 84
    exp                            shift and go to state 67
    term                           shift and go to state 69
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 115

    (73) print_statement -> PRINT opening_par error closing_par . semicol last_print_dummy

    semicol         shift and go to state 136


state 116

    (18) func -> VOID identifier create_function opening_par param_list closing_par opening_brack vars . create_func_quad body closing_brack semicol end_function
    (20) create_func_quad -> .

    opening_anglbrack reduce using rule 20 (create_func_quad -> .)

    create_func_quad               shift and go to state 137

state 117

    (39) expression -> exp op_lesser_than exp .
    (45) exp -> exp . op_plus term
    (46) exp -> exp . op_minus term

    semicol         reduce using rule 39 (expression -> exp op_lesser_than exp .)
    closing_par     reduce using rule 39 (expression -> exp op_lesser_than exp .)
    comma           reduce using rule 39 (expression -> exp op_lesser_than exp .)
    op_plus         shift and go to state 98
    op_minus        shift and go to state 99


state 118

    (40) expression -> exp op_more_than exp .
    (45) exp -> exp . op_plus term
    (46) exp -> exp . op_minus term

    semicol         reduce using rule 40 (expression -> exp op_more_than exp .)
    closing_par     reduce using rule 40 (expression -> exp op_more_than exp .)
    comma           reduce using rule 40 (expression -> exp op_more_than exp .)
    op_plus         shift and go to state 98
    op_minus        shift and go to state 99


state 119

    (41) expression -> exp op_lessthan_equal exp .
    (45) exp -> exp . op_plus term
    (46) exp -> exp . op_minus term

    semicol         reduce using rule 41 (expression -> exp op_lessthan_equal exp .)
    closing_par     reduce using rule 41 (expression -> exp op_lessthan_equal exp .)
    comma           reduce using rule 41 (expression -> exp op_lessthan_equal exp .)
    op_plus         shift and go to state 98
    op_minus        shift and go to state 99


state 120

    (42) expression -> exp op_morethan_equal exp .
    (45) exp -> exp . op_plus term
    (46) exp -> exp . op_minus term

    semicol         reduce using rule 42 (expression -> exp op_morethan_equal exp .)
    closing_par     reduce using rule 42 (expression -> exp op_morethan_equal exp .)
    comma           reduce using rule 42 (expression -> exp op_morethan_equal exp .)
    op_plus         shift and go to state 98
    op_minus        shift and go to state 99


state 121

    (43) expression -> exp op_equals exp .
    (45) exp -> exp . op_plus term
    (46) exp -> exp . op_minus term

    semicol         reduce using rule 43 (expression -> exp op_equals exp .)
    closing_par     reduce using rule 43 (expression -> exp op_equals exp .)
    comma           reduce using rule 43 (expression -> exp op_equals exp .)
    op_plus         shift and go to state 98
    op_minus        shift and go to state 99


state 122

    (44) expression -> exp op_not_equal exp .
    (45) exp -> exp . op_plus term
    (46) exp -> exp . op_minus term

    semicol         reduce using rule 44 (expression -> exp op_not_equal exp .)
    closing_par     reduce using rule 44 (expression -> exp op_not_equal exp .)
    comma           reduce using rule 44 (expression -> exp op_not_equal exp .)
    op_plus         shift and go to state 98
    op_minus        shift and go to state 99


state 123

    (45) exp -> exp op_plus term .
    (48) term -> term . op_mult factor
    (49) term -> term . op_div factor

    op_lesser_than  reduce using rule 45 (exp -> exp op_plus term .)
    op_more_than    reduce using rule 45 (exp -> exp op_plus term .)
    op_lessthan_equal reduce using rule 45 (exp -> exp op_plus term .)
    op_morethan_equal reduce using rule 45 (exp -> exp op_plus term .)
    op_equals       reduce using rule 45 (exp -> exp op_plus term .)
    op_not_equal    reduce using rule 45 (exp -> exp op_plus term .)
    op_plus         reduce using rule 45 (exp -> exp op_plus term .)
    op_minus        reduce using rule 45 (exp -> exp op_plus term .)
    semicol         reduce using rule 45 (exp -> exp op_plus term .)
    closing_par     reduce using rule 45 (exp -> exp op_plus term .)
    comma           reduce using rule 45 (exp -> exp op_plus term .)
    op_mult         shift and go to state 102
    op_div          shift and go to state 103


state 124

    (46) exp -> exp op_minus term .
    (48) term -> term . op_mult factor
    (49) term -> term . op_div factor

    op_lesser_than  reduce using rule 46 (exp -> exp op_minus term .)
    op_more_than    reduce using rule 46 (exp -> exp op_minus term .)
    op_lessthan_equal reduce using rule 46 (exp -> exp op_minus term .)
    op_morethan_equal reduce using rule 46 (exp -> exp op_minus term .)
    op_equals       reduce using rule 46 (exp -> exp op_minus term .)
    op_not_equal    reduce using rule 46 (exp -> exp op_minus term .)
    op_plus         reduce using rule 46 (exp -> exp op_minus term .)
    op_minus        reduce using rule 46 (exp -> exp op_minus term .)
    semicol         reduce using rule 46 (exp -> exp op_minus term .)
    closing_par     reduce using rule 46 (exp -> exp op_minus term .)
    comma           reduce using rule 46 (exp -> exp op_minus term .)
    op_mult         shift and go to state 102
    op_div          shift and go to state 103


state 125

    (48) term -> term op_mult factor .

    op_mult         reduce using rule 48 (term -> term op_mult factor .)
    op_div          reduce using rule 48 (term -> term op_mult factor .)
    op_lesser_than  reduce using rule 48 (term -> term op_mult factor .)
    op_more_than    reduce using rule 48 (term -> term op_mult factor .)
    op_lessthan_equal reduce using rule 48 (term -> term op_mult factor .)
    op_morethan_equal reduce using rule 48 (term -> term op_mult factor .)
    op_equals       reduce using rule 48 (term -> term op_mult factor .)
    op_not_equal    reduce using rule 48 (term -> term op_mult factor .)
    op_plus         reduce using rule 48 (term -> term op_mult factor .)
    op_minus        reduce using rule 48 (term -> term op_mult factor .)
    semicol         reduce using rule 48 (term -> term op_mult factor .)
    closing_par     reduce using rule 48 (term -> term op_mult factor .)
    comma           reduce using rule 48 (term -> term op_mult factor .)


state 126

    (49) term -> term op_div factor .

    op_mult         reduce using rule 49 (term -> term op_div factor .)
    op_div          reduce using rule 49 (term -> term op_div factor .)
    op_lesser_than  reduce using rule 49 (term -> term op_div factor .)
    op_more_than    reduce using rule 49 (term -> term op_div factor .)
    op_lessthan_equal reduce using rule 49 (term -> term op_div factor .)
    op_morethan_equal reduce using rule 49 (term -> term op_div factor .)
    op_equals       reduce using rule 49 (term -> term op_div factor .)
    op_not_equal    reduce using rule 49 (term -> term op_div factor .)
    op_plus         reduce using rule 49 (term -> term op_div factor .)
    op_minus        reduce using rule 49 (term -> term op_div factor .)
    semicol         reduce using rule 49 (term -> term op_div factor .)
    closing_par     reduce using rule 49 (term -> term op_div factor .)
    comma           reduce using rule 49 (term -> term op_div factor .)


state 127

    (51) factor -> opening_par expression closing_par .

    op_mult         reduce using rule 51 (factor -> opening_par expression closing_par .)
    op_div          reduce using rule 51 (factor -> opening_par expression closing_par .)
    op_lesser_than  reduce using rule 51 (factor -> opening_par expression closing_par .)
    op_more_than    reduce using rule 51 (factor -> opening_par expression closing_par .)
    op_lessthan_equal reduce using rule 51 (factor -> opening_par expression closing_par .)
    op_morethan_equal reduce using rule 51 (factor -> opening_par expression closing_par .)
    op_equals       reduce using rule 51 (factor -> opening_par expression closing_par .)
    op_not_equal    reduce using rule 51 (factor -> opening_par expression closing_par .)
    op_plus         reduce using rule 51 (factor -> opening_par expression closing_par .)
    op_minus        reduce using rule 51 (factor -> opening_par expression closing_par .)
    semicol         reduce using rule 51 (factor -> opening_par expression closing_par .)
    closing_par     reduce using rule 51 (factor -> opening_par expression closing_par .)
    comma           reduce using rule 51 (factor -> opening_par expression closing_par .)


state 128

    (60) f_call -> identifier check_function opening_par arguments closing_par . semicol make_call_quads

    semicol         shift and go to state 138


state 129

    (63) arguments -> arguments comma . expression
    (38) expression -> . exp
    (39) expression -> . exp op_lesser_than exp
    (40) expression -> . exp op_more_than exp
    (41) expression -> . exp op_lessthan_equal exp
    (42) expression -> . exp op_morethan_equal exp
    (43) expression -> . exp op_equals exp
    (44) expression -> . exp op_not_equal exp
    (45) exp -> . exp op_plus term
    (46) exp -> . exp op_minus term
    (47) exp -> . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    expression                     shift and go to state 139
    exp                            shift and go to state 67
    term                           shift and go to state 69
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 130

    (80) condition -> IF opening_par expression closing_par gotof . body check_else last_goto
    (26) body -> . opening_anglbrack statements closing_anglbrack

    opening_anglbrack shift and go to state 30

    body                           shift and go to state 140

state 131

    (88) condition -> IF opening_par error gotof_dummy body . check_else last_goto_dummy
    (83) check_else -> . else_goto body
    (87) check_else -> .
    (84) else_goto -> . ELSE

    semicol         reduce using rule 87 (check_else -> .)
    ELSE            shift and go to state 143

    check_else                     shift and go to state 141
    else_goto                      shift and go to state 142

state 132

    (74) cycle -> DO start_cycle body WHILE opening_par . expression closing_par end_cycle semicol
    (38) expression -> . exp
    (39) expression -> . exp op_lesser_than exp
    (40) expression -> . exp op_more_than exp
    (41) expression -> . exp op_lessthan_equal exp
    (42) expression -> . exp op_morethan_equal exp
    (43) expression -> . exp op_equals exp
    (44) expression -> . exp op_not_equal exp
    (45) exp -> . exp op_plus term
    (46) exp -> . exp op_minus term
    (47) exp -> . term
    (48) term -> . term op_mult factor
    (49) term -> . term op_div factor
    (50) term -> . factor
    (51) factor -> . opening_par expression closing_par
    (52) factor -> . op_plus identifier
    (53) factor -> . op_plus cte
    (54) factor -> . op_minus identifier
    (55) factor -> . op_minus cte
    (56) factor -> . identifier
    (57) factor -> . cte
    (58) cte -> . const_int
    (59) cte -> . const_float

    opening_par     shift and go to state 72
    op_plus         shift and go to state 68
    op_minus        shift and go to state 70
    identifier      shift and go to state 63
    const_int       shift and go to state 74
    const_float     shift and go to state 75

    expression                     shift and go to state 144
    exp                            shift and go to state 67
    term                           shift and go to state 69
    factor                         shift and go to state 71
    cte                            shift and go to state 73

state 133

    (79) cycle -> DO start_cycle_dummy body WHILE opening_par . error closing_par end_cycle_dummy semicol

    error           shift and go to state 145


state 134

    (66) print_statement -> PRINT opening_par print_args closing_par semicol . last_print
    (71) last_print -> .

    closing_anglbrack reduce using rule 71 (last_print -> .)
    identifier      reduce using rule 71 (last_print -> .)
    IF              reduce using rule 71 (last_print -> .)
    DO              reduce using rule 71 (last_print -> .)
    PRINT           reduce using rule 71 (last_print -> .)

    last_print                     shift and go to state 146

state 135

    (67) print_args -> print_args comma print_arg .

    closing_par     reduce using rule 67 (print_args -> print_args comma print_arg .)
    comma           reduce using rule 67 (print_args -> print_args comma print_arg .)


state 136

    (73) print_statement -> PRINT opening_par error closing_par semicol . last_print_dummy
    (72) last_print_dummy -> .

    closing_anglbrack reduce using rule 72 (last_print_dummy -> .)
    identifier      reduce using rule 72 (last_print_dummy -> .)
    IF              reduce using rule 72 (last_print_dummy -> .)
    DO              reduce using rule 72 (last_print_dummy -> .)
    PRINT           reduce using rule 72 (last_print_dummy -> .)

    last_print_dummy               shift and go to state 147

state 137

    (18) func -> VOID identifier create_function opening_par param_list closing_par opening_brack vars create_func_quad . body closing_brack semicol end_function
    (26) body -> . opening_anglbrack statements closing_anglbrack

    opening_anglbrack shift and go to state 30

    body                           shift and go to state 148

state 138

    (60) f_call -> identifier check_function opening_par arguments closing_par semicol . make_call_quads
    (62) make_call_quads -> .

    closing_anglbrack reduce using rule 62 (make_call_quads -> .)
    identifier      reduce using rule 62 (make_call_quads -> .)
    IF              reduce using rule 62 (make_call_quads -> .)
    DO              reduce using rule 62 (make_call_quads -> .)
    PRINT           reduce using rule 62 (make_call_quads -> .)

    make_call_quads                shift and go to state 149

state 139

    (63) arguments -> arguments comma expression .

    closing_par     reduce using rule 63 (arguments -> arguments comma expression .)
    comma           reduce using rule 63 (arguments -> arguments comma expression .)


state 140

    (80) condition -> IF opening_par expression closing_par gotof body . check_else last_goto
    (83) check_else -> . else_goto body
    (87) check_else -> .
    (84) else_goto -> . ELSE

    semicol         reduce using rule 87 (check_else -> .)
    ELSE            shift and go to state 143

    check_else                     shift and go to state 150
    else_goto                      shift and go to state 142

state 141

    (88) condition -> IF opening_par error gotof_dummy body check_else . last_goto_dummy
    (86) last_goto_dummy -> . semicol

    semicol         shift and go to state 152

    last_goto_dummy                shift and go to state 151

state 142

    (83) check_else -> else_goto . body
    (26) body -> . opening_anglbrack statements closing_anglbrack

    opening_anglbrack shift and go to state 30

    body                           shift and go to state 153

state 143

    (84) else_goto -> ELSE .

    opening_anglbrack reduce using rule 84 (else_goto -> ELSE .)


state 144

    (74) cycle -> DO start_cycle body WHILE opening_par expression . closing_par end_cycle semicol

    closing_par     shift and go to state 154


state 145

    (79) cycle -> DO start_cycle_dummy body WHILE opening_par error . closing_par end_cycle_dummy semicol

    closing_par     shift and go to state 155


state 146

    (66) print_statement -> PRINT opening_par print_args closing_par semicol last_print .

    closing_anglbrack reduce using rule 66 (print_statement -> PRINT opening_par print_args closing_par semicol last_print .)
    identifier      reduce using rule 66 (print_statement -> PRINT opening_par print_args closing_par semicol last_print .)
    IF              reduce using rule 66 (print_statement -> PRINT opening_par print_args closing_par semicol last_print .)
    DO              reduce using rule 66 (print_statement -> PRINT opening_par print_args closing_par semicol last_print .)
    PRINT           reduce using rule 66 (print_statement -> PRINT opening_par print_args closing_par semicol last_print .)


state 147

    (73) print_statement -> PRINT opening_par error closing_par semicol last_print_dummy .

    closing_anglbrack reduce using rule 73 (print_statement -> PRINT opening_par error closing_par semicol last_print_dummy .)
    identifier      reduce using rule 73 (print_statement -> PRINT opening_par error closing_par semicol last_print_dummy .)
    IF              reduce using rule 73 (print_statement -> PRINT opening_par error closing_par semicol last_print_dummy .)
    DO              reduce using rule 73 (print_statement -> PRINT opening_par error closing_par semicol last_print_dummy .)
    PRINT           reduce using rule 73 (print_statement -> PRINT opening_par error closing_par semicol last_print_dummy .)


state 148

    (18) func -> VOID identifier create_function opening_par param_list closing_par opening_brack vars create_func_quad body . closing_brack semicol end_function

    closing_brack   shift and go to state 156


state 149

    (60) f_call -> identifier check_function opening_par arguments closing_par semicol make_call_quads .

    closing_anglbrack reduce using rule 60 (f_call -> identifier check_function opening_par arguments closing_par semicol make_call_quads .)
    identifier      reduce using rule 60 (f_call -> identifier check_function opening_par arguments closing_par semicol make_call_quads .)
    IF              reduce using rule 60 (f_call -> identifier check_function opening_par arguments closing_par semicol make_call_quads .)
    DO              reduce using rule 60 (f_call -> identifier check_function opening_par arguments closing_par semicol make_call_quads .)
    PRINT           reduce using rule 60 (f_call -> identifier check_function opening_par arguments closing_par semicol make_call_quads .)


state 150

    (80) condition -> IF opening_par expression closing_par gotof body check_else . last_goto
    (85) last_goto -> . semicol

    semicol         shift and go to state 158

    last_goto                      shift and go to state 157

state 151

    (88) condition -> IF opening_par error gotof_dummy body check_else last_goto_dummy .

    closing_anglbrack reduce using rule 88 (condition -> IF opening_par error gotof_dummy body check_else last_goto_dummy .)
    identifier      reduce using rule 88 (condition -> IF opening_par error gotof_dummy body check_else last_goto_dummy .)
    IF              reduce using rule 88 (condition -> IF opening_par error gotof_dummy body check_else last_goto_dummy .)
    DO              reduce using rule 88 (condition -> IF opening_par error gotof_dummy body check_else last_goto_dummy .)
    PRINT           reduce using rule 88 (condition -> IF opening_par error gotof_dummy body check_else last_goto_dummy .)


state 152

    (86) last_goto_dummy -> semicol .

    closing_anglbrack reduce using rule 86 (last_goto_dummy -> semicol .)
    identifier      reduce using rule 86 (last_goto_dummy -> semicol .)
    IF              reduce using rule 86 (last_goto_dummy -> semicol .)
    DO              reduce using rule 86 (last_goto_dummy -> semicol .)
    PRINT           reduce using rule 86 (last_goto_dummy -> semicol .)


state 153

    (83) check_else -> else_goto body .

    semicol         reduce using rule 83 (check_else -> else_goto body .)


state 154

    (74) cycle -> DO start_cycle body WHILE opening_par expression closing_par . end_cycle semicol
    (77) end_cycle -> .

    semicol         reduce using rule 77 (end_cycle -> .)

    end_cycle                      shift and go to state 159

state 155

    (79) cycle -> DO start_cycle_dummy body WHILE opening_par error closing_par . end_cycle_dummy semicol
    (78) end_cycle_dummy -> .

    semicol         reduce using rule 78 (end_cycle_dummy -> .)

    end_cycle_dummy                shift and go to state 160

state 156

    (18) func -> VOID identifier create_function opening_par param_list closing_par opening_brack vars create_func_quad body closing_brack . semicol end_function

    semicol         shift and go to state 161


state 157

    (80) condition -> IF opening_par expression closing_par gotof body check_else last_goto .

    closing_anglbrack reduce using rule 80 (condition -> IF opening_par expression closing_par gotof body check_else last_goto .)
    identifier      reduce using rule 80 (condition -> IF opening_par expression closing_par gotof body check_else last_goto .)
    IF              reduce using rule 80 (condition -> IF opening_par expression closing_par gotof body check_else last_goto .)
    DO              reduce using rule 80 (condition -> IF opening_par expression closing_par gotof body check_else last_goto .)
    PRINT           reduce using rule 80 (condition -> IF opening_par expression closing_par gotof body check_else last_goto .)


state 158

    (85) last_goto -> semicol .

    closing_anglbrack reduce using rule 85 (last_goto -> semicol .)
    identifier      reduce using rule 85 (last_goto -> semicol .)
    IF              reduce using rule 85 (last_goto -> semicol .)
    DO              reduce using rule 85 (last_goto -> semicol .)
    PRINT           reduce using rule 85 (last_goto -> semicol .)


state 159

    (74) cycle -> DO start_cycle body WHILE opening_par expression closing_par end_cycle . semicol

    semicol         shift and go to state 162


state 160

    (79) cycle -> DO start_cycle_dummy body WHILE opening_par error closing_par end_cycle_dummy . semicol

    semicol         shift and go to state 163


state 161

    (18) func -> VOID identifier create_function opening_par param_list closing_par opening_brack vars create_func_quad body closing_brack semicol . end_function
    (21) end_function -> .

    VOID            reduce using rule 21 (end_function -> .)
    MAIN            reduce using rule 21 (end_function -> .)

    end_function                   shift and go to state 164

state 162

    (74) cycle -> DO start_cycle body WHILE opening_par expression closing_par end_cycle semicol .

    closing_anglbrack reduce using rule 74 (cycle -> DO start_cycle body WHILE opening_par expression closing_par end_cycle semicol .)
    identifier      reduce using rule 74 (cycle -> DO start_cycle body WHILE opening_par expression closing_par end_cycle semicol .)
    IF              reduce using rule 74 (cycle -> DO start_cycle body WHILE opening_par expression closing_par end_cycle semicol .)
    DO              reduce using rule 74 (cycle -> DO start_cycle body WHILE opening_par expression closing_par end_cycle semicol .)
    PRINT           reduce using rule 74 (cycle -> DO start_cycle body WHILE opening_par expression closing_par end_cycle semicol .)


state 163

    (79) cycle -> DO start_cycle_dummy body WHILE opening_par error closing_par end_cycle_dummy semicol .

    closing_anglbrack reduce using rule 79 (cycle -> DO start_cycle_dummy body WHILE opening_par error closing_par end_cycle_dummy semicol .)
    identifier      reduce using rule 79 (cycle -> DO start_cycle_dummy body WHILE opening_par error closing_par end_cycle_dummy semicol .)
    IF              reduce using rule 79 (cycle -> DO start_cycle_dummy body WHILE opening_par error closing_par end_cycle_dummy semicol .)
    DO              reduce using rule 79 (cycle -> DO start_cycle_dummy body WHILE opening_par error closing_par end_cycle_dummy semicol .)
    PRINT           reduce using rule 79 (cycle -> DO start_cycle_dummy body WHILE opening_par error closing_par end_cycle_dummy semicol .)


state 164

    (18) func -> VOID identifier create_function opening_par param_list closing_par opening_brack vars create_func_quad body closing_brack semicol end_function .

    VOID            reduce using rule 18 (func -> VOID identifier create_function opening_par param_list closing_par opening_brack vars create_func_quad body closing_brack semicol end_function .)
    MAIN            reduce using rule 18 (func -> VOID identifier create_function opening_par param_list closing_par opening_brack vars create_func_quad body closing_brack semicol end_function .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for identifier in state 30 resolved as shift
WARNING: shift/reduce conflict for IF in state 30 resolved as shift
WARNING: shift/reduce conflict for DO in state 30 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 30 resolved as shift
WARNING: reduce/reduce conflict in state 44 resolved using rule (start_cycle -> <empty>)
WARNING: rejected rule (start_cycle_dummy -> <empty>) in state 44
WARNING: Rule (start_cycle_dummy -> <empty>) is never reduced
