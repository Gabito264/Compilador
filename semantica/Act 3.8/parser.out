Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    comment

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM identifier create_program semicol vars funcs MAIN body END elim_program
Rule 2     create_program -> <empty>
Rule 3     elim_program -> <empty>
Rule 4     programa -> PROGRAM error semicol vars funcs MAIN body END
Rule 5     vars -> VAR var_definition
Rule 6     vars -> <empty>
Rule 7     var_definition -> id_list twopoint type semicol var_definition
Rule 8     var_definition -> id_list twopoint type semicol
Rule 9     id_list -> identifier comma id_list
Rule 10    id_list -> identifier
Rule 11    var_definition -> error twopoint type semicol var_definition
Rule 12    var_definition -> error twopoint type semicol
Rule 13    type -> INTEGER
Rule 14    type -> FLOAT
Rule 15    type -> STRING
Rule 16    funcs -> func funcs
Rule 17    funcs -> <empty>
Rule 18    func -> VOID identifier opening_par param_list closing_par opening_brack vars body closing_brack semicol
Rule 19    param_list -> param_list comma param
Rule 20    param_list -> param
Rule 21    param_list -> <empty>
Rule 22    param -> identifier twopoint type
Rule 23    func -> VOID identifier opening_par error closing_par opening_brack vars body closing_brack semicol
Rule 24    body -> opening_anglbrack statements closing_anglbrack
Rule 25    statements -> statements statement
Rule 26    statements -> statement
Rule 27    statements -> <empty>
Rule 28    statement -> assign
Rule 29    statement -> condition
Rule 30    statement -> cycle
Rule 31    statement -> f_call
Rule 32    statement -> print_statement
Rule 33    assign -> identifier op_assign expression semicol
Rule 34    assign -> identifier op_assign const_string semicol
Rule 35    assign -> identifier op_assign error semicol
Rule 36    expression -> exp
Rule 37    expression -> exp op_lesser_than exp
Rule 38    expression -> exp op_more_than exp
Rule 39    expression -> exp op_lessthan_equal exp
Rule 40    expression -> exp op_morethan_equal exp
Rule 41    expression -> exp op_equals exp
Rule 42    expression -> exp op_not_equal exp
Rule 43    exp -> exp op_plus term
Rule 44    exp -> exp op_minus term
Rule 45    exp -> term
Rule 46    term -> term op_mult factor
Rule 47    term -> term op_div factor
Rule 48    term -> factor
Rule 49    factor -> opening_par expression closing_par
Rule 50    factor -> op_plus identifier
Rule 51    factor -> op_plus cte
Rule 52    factor -> op_minus identifier
Rule 53    factor -> op_minus cte
Rule 54    factor -> identifier
Rule 55    factor -> cte
Rule 56    cte -> const_int
Rule 57    cte -> const_float
Rule 58    f_call -> identifier opening_par arguments closing_par semicol
Rule 59    arguments -> arguments comma expression
Rule 60    arguments -> expression
Rule 61    arguments -> <empty>
Rule 62    f_call -> identifier opening_par error closing_par semicol
Rule 63    print_statement -> PRINT opening_par print_args closing_par semicol
Rule 64    print_args -> print_args comma print_arg
Rule 65    print_args -> print_arg
Rule 66    print_arg -> expression
Rule 67    print_arg -> const_string
Rule 68    print_statement -> PRINT opening_par error closing_par semicol
Rule 69    cycle -> DO body WHILE opening_par expression closing_par semicol
Rule 70    cycle -> DO body WHILE opening_par error closing_par semicol
Rule 71    condition -> IF opening_par expression closing_par body check_else semicol
Rule 72    check_else -> ELSE body
Rule 73    check_else -> <empty>
Rule 74    condition -> IF opening_par error closing_par body check_else semicol

Terminals, with rules where they appear

DO                   : 69 70
ELSE                 : 72
END                  : 1 4
FLOAT                : 14
IF                   : 71 74
INTEGER              : 13
MAIN                 : 1 4
PRINT                : 63 68
PROGRAM              : 1 4
STRING               : 15
VAR                  : 5
VOID                 : 18 23
WHILE                : 69 70
closing_anglbrack    : 24
closing_brack        : 18 23
closing_par          : 18 23 49 58 62 63 68 69 70 71 74
comma                : 9 19 59 64
comment              : 
const_float          : 57
const_int            : 56
const_string         : 34 67
error                : 4 11 12 23 35 62 68 70 74
identifier           : 1 9 10 18 22 23 33 34 35 50 52 54 58 62
op_assign            : 33 34 35
op_div               : 47
op_equals            : 41
op_lesser_than       : 37
op_lessthan_equal    : 39
op_minus             : 44 52 53
op_more_than         : 38
op_morethan_equal    : 40
op_mult              : 46
op_not_equal         : 42
op_plus              : 43 50 51
opening_anglbrack    : 24
opening_brack        : 18 23
opening_par          : 18 23 49 58 62 63 68 69 70 71 74
semicol              : 1 4 7 8 11 12 18 23 33 34 35 58 62 63 68 69 70 71 74
twopoint             : 7 8 11 12 22

Nonterminals, with rules where they appear

arguments            : 58 59
assign               : 28
body                 : 1 4 18 23 69 70 71 72 74
check_else           : 71 74
condition            : 29
create_program       : 1
cte                  : 51 53 55
cycle                : 30
elim_program         : 1
exp                  : 36 37 37 38 38 39 39 40 40 41 41 42 42 43 44
expression           : 33 49 59 60 66 69 71
f_call               : 31
factor               : 46 47 48
func                 : 16
funcs                : 1 4 16
id_list              : 7 8 9
param                : 19 20
param_list           : 18 19
print_arg            : 64 65
print_args           : 63 64
print_statement      : 32
programa             : 0
statement            : 25 26
statements           : 24 25
term                 : 43 44 45 46 47
type                 : 7 8 11 12 22
var_definition       : 5 7 11
vars                 : 1 4 18 23

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM identifier create_program semicol vars funcs MAIN body END elim_program
    (4) programa -> . PROGRAM error semicol vars funcs MAIN body END

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . identifier create_program semicol vars funcs MAIN body END elim_program
    (4) programa -> PROGRAM . error semicol vars funcs MAIN body END

    identifier      shift and go to state 3
    error           shift and go to state 4


state 3

    (1) programa -> PROGRAM identifier . create_program semicol vars funcs MAIN body END elim_program
    (2) create_program -> .

    semicol         reduce using rule 2 (create_program -> .)

    create_program                 shift and go to state 5

state 4

    (4) programa -> PROGRAM error . semicol vars funcs MAIN body END

    semicol         shift and go to state 6


state 5

    (1) programa -> PROGRAM identifier create_program . semicol vars funcs MAIN body END elim_program

    semicol         shift and go to state 7


state 6

    (4) programa -> PROGRAM error semicol . vars funcs MAIN body END
    (5) vars -> . VAR var_definition
    (6) vars -> .

    VAR             shift and go to state 9
    VOID            reduce using rule 6 (vars -> .)
    MAIN            reduce using rule 6 (vars -> .)

    vars                           shift and go to state 8

state 7

    (1) programa -> PROGRAM identifier create_program semicol . vars funcs MAIN body END elim_program
    (5) vars -> . VAR var_definition
    (6) vars -> .

    VAR             shift and go to state 9
    VOID            reduce using rule 6 (vars -> .)
    MAIN            reduce using rule 6 (vars -> .)

    vars                           shift and go to state 10

state 8

    (4) programa -> PROGRAM error semicol vars . funcs MAIN body END
    (16) funcs -> . func funcs
    (17) funcs -> .
    (18) func -> . VOID identifier opening_par param_list closing_par opening_brack vars body closing_brack semicol
    (23) func -> . VOID identifier opening_par error closing_par opening_brack vars body closing_brack semicol

    MAIN            reduce using rule 17 (funcs -> .)
    VOID            shift and go to state 13

    funcs                          shift and go to state 11
    func                           shift and go to state 12

state 9

    (5) vars -> VAR . var_definition
    (7) var_definition -> . id_list twopoint type semicol var_definition
    (8) var_definition -> . id_list twopoint type semicol
    (11) var_definition -> . error twopoint type semicol var_definition
    (12) var_definition -> . error twopoint type semicol
    (9) id_list -> . identifier comma id_list
    (10) id_list -> . identifier

    error           shift and go to state 16
    identifier      shift and go to state 17

    var_definition                 shift and go to state 14
    id_list                        shift and go to state 15

state 10

    (1) programa -> PROGRAM identifier create_program semicol vars . funcs MAIN body END elim_program
    (16) funcs -> . func funcs
    (17) funcs -> .
    (18) func -> . VOID identifier opening_par param_list closing_par opening_brack vars body closing_brack semicol
    (23) func -> . VOID identifier opening_par error closing_par opening_brack vars body closing_brack semicol

    MAIN            reduce using rule 17 (funcs -> .)
    VOID            shift and go to state 13

    funcs                          shift and go to state 18
    func                           shift and go to state 12

state 11

    (4) programa -> PROGRAM error semicol vars funcs . MAIN body END

    MAIN            shift and go to state 19


state 12

    (16) funcs -> func . funcs
    (16) funcs -> . func funcs
    (17) funcs -> .
    (18) func -> . VOID identifier opening_par param_list closing_par opening_brack vars body closing_brack semicol
    (23) func -> . VOID identifier opening_par error closing_par opening_brack vars body closing_brack semicol

    MAIN            reduce using rule 17 (funcs -> .)
    VOID            shift and go to state 13

    func                           shift and go to state 12
    funcs                          shift and go to state 20

state 13

    (18) func -> VOID . identifier opening_par param_list closing_par opening_brack vars body closing_brack semicol
    (23) func -> VOID . identifier opening_par error closing_par opening_brack vars body closing_brack semicol

    identifier      shift and go to state 21


state 14

    (5) vars -> VAR var_definition .

    VOID            reduce using rule 5 (vars -> VAR var_definition .)
    MAIN            reduce using rule 5 (vars -> VAR var_definition .)
    opening_anglbrack reduce using rule 5 (vars -> VAR var_definition .)


state 15

    (7) var_definition -> id_list . twopoint type semicol var_definition
    (8) var_definition -> id_list . twopoint type semicol

    twopoint        shift and go to state 22


state 16

    (11) var_definition -> error . twopoint type semicol var_definition
    (12) var_definition -> error . twopoint type semicol

    twopoint        shift and go to state 23


state 17

    (9) id_list -> identifier . comma id_list
    (10) id_list -> identifier .

    comma           shift and go to state 24
    twopoint        reduce using rule 10 (id_list -> identifier .)


state 18

    (1) programa -> PROGRAM identifier create_program semicol vars funcs . MAIN body END elim_program

    MAIN            shift and go to state 25


state 19

    (4) programa -> PROGRAM error semicol vars funcs MAIN . body END
    (24) body -> . opening_anglbrack statements closing_anglbrack

    opening_anglbrack shift and go to state 27

    body                           shift and go to state 26

state 20

    (16) funcs -> func funcs .

    MAIN            reduce using rule 16 (funcs -> func funcs .)


state 21

    (18) func -> VOID identifier . opening_par param_list closing_par opening_brack vars body closing_brack semicol
    (23) func -> VOID identifier . opening_par error closing_par opening_brack vars body closing_brack semicol

    opening_par     shift and go to state 28


state 22

    (7) var_definition -> id_list twopoint . type semicol var_definition
    (8) var_definition -> id_list twopoint . type semicol
    (13) type -> . INTEGER
    (14) type -> . FLOAT
    (15) type -> . STRING

    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    type                           shift and go to state 29

state 23

    (11) var_definition -> error twopoint . type semicol var_definition
    (12) var_definition -> error twopoint . type semicol
    (13) type -> . INTEGER
    (14) type -> . FLOAT
    (15) type -> . STRING

    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    type                           shift and go to state 33

state 24

    (9) id_list -> identifier comma . id_list
    (9) id_list -> . identifier comma id_list
    (10) id_list -> . identifier

    identifier      shift and go to state 17

    id_list                        shift and go to state 34

state 25

    (1) programa -> PROGRAM identifier create_program semicol vars funcs MAIN . body END elim_program
    (24) body -> . opening_anglbrack statements closing_anglbrack

    opening_anglbrack shift and go to state 27

    body                           shift and go to state 35

state 26

    (4) programa -> PROGRAM error semicol vars funcs MAIN body . END

    END             shift and go to state 36


state 27

    (24) body -> opening_anglbrack . statements closing_anglbrack
    (25) statements -> . statements statement
    (26) statements -> . statement
    (27) statements -> .
    (28) statement -> . assign
    (29) statement -> . condition
    (30) statement -> . cycle
    (31) statement -> . f_call
    (32) statement -> . print_statement
    (33) assign -> . identifier op_assign expression semicol
    (34) assign -> . identifier op_assign const_string semicol
    (35) assign -> . identifier op_assign error semicol
    (71) condition -> . IF opening_par expression closing_par body check_else semicol
    (74) condition -> . IF opening_par error closing_par body check_else semicol
    (69) cycle -> . DO body WHILE opening_par expression closing_par semicol
    (70) cycle -> . DO body WHILE opening_par error closing_par semicol
    (58) f_call -> . identifier opening_par arguments closing_par semicol
    (62) f_call -> . identifier opening_par error closing_par semicol
    (63) print_statement -> . PRINT opening_par print_args closing_par semicol
    (68) print_statement -> . PRINT opening_par error closing_par semicol

  ! shift/reduce conflict for identifier resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    closing_anglbrack reduce using rule 27 (statements -> .)
    identifier      shift and go to state 44
    IF              shift and go to state 45
    DO              shift and go to state 46
    PRINT           shift and go to state 47

  ! identifier      [ reduce using rule 27 (statements -> .) ]
  ! IF              [ reduce using rule 27 (statements -> .) ]
  ! DO              [ reduce using rule 27 (statements -> .) ]
  ! PRINT           [ reduce using rule 27 (statements -> .) ]

    statements                     shift and go to state 37
    statement                      shift and go to state 38
    assign                         shift and go to state 39
    condition                      shift and go to state 40
    cycle                          shift and go to state 41
    f_call                         shift and go to state 42
    print_statement                shift and go to state 43

state 28

    (18) func -> VOID identifier opening_par . param_list closing_par opening_brack vars body closing_brack semicol
    (23) func -> VOID identifier opening_par . error closing_par opening_brack vars body closing_brack semicol
    (19) param_list -> . param_list comma param
    (20) param_list -> . param
    (21) param_list -> .
    (22) param -> . identifier twopoint type

    error           shift and go to state 50
    closing_par     reduce using rule 21 (param_list -> .)
    comma           reduce using rule 21 (param_list -> .)
    identifier      shift and go to state 48

    param_list                     shift and go to state 49
    param                          shift and go to state 51

state 29

    (7) var_definition -> id_list twopoint type . semicol var_definition
    (8) var_definition -> id_list twopoint type . semicol

    semicol         shift and go to state 52


state 30

    (13) type -> INTEGER .

    semicol         reduce using rule 13 (type -> INTEGER .)
    closing_par     reduce using rule 13 (type -> INTEGER .)
    comma           reduce using rule 13 (type -> INTEGER .)


state 31

    (14) type -> FLOAT .

    semicol         reduce using rule 14 (type -> FLOAT .)
    closing_par     reduce using rule 14 (type -> FLOAT .)
    comma           reduce using rule 14 (type -> FLOAT .)


state 32

    (15) type -> STRING .

    semicol         reduce using rule 15 (type -> STRING .)
    closing_par     reduce using rule 15 (type -> STRING .)
    comma           reduce using rule 15 (type -> STRING .)


state 33

    (11) var_definition -> error twopoint type . semicol var_definition
    (12) var_definition -> error twopoint type . semicol

    semicol         shift and go to state 53


state 34

    (9) id_list -> identifier comma id_list .

    twopoint        reduce using rule 9 (id_list -> identifier comma id_list .)


state 35

    (1) programa -> PROGRAM identifier create_program semicol vars funcs MAIN body . END elim_program

    END             shift and go to state 54


state 36

    (4) programa -> PROGRAM error semicol vars funcs MAIN body END .

    $end            reduce using rule 4 (programa -> PROGRAM error semicol vars funcs MAIN body END .)


state 37

    (24) body -> opening_anglbrack statements . closing_anglbrack
    (25) statements -> statements . statement
    (28) statement -> . assign
    (29) statement -> . condition
    (30) statement -> . cycle
    (31) statement -> . f_call
    (32) statement -> . print_statement
    (33) assign -> . identifier op_assign expression semicol
    (34) assign -> . identifier op_assign const_string semicol
    (35) assign -> . identifier op_assign error semicol
    (71) condition -> . IF opening_par expression closing_par body check_else semicol
    (74) condition -> . IF opening_par error closing_par body check_else semicol
    (69) cycle -> . DO body WHILE opening_par expression closing_par semicol
    (70) cycle -> . DO body WHILE opening_par error closing_par semicol
    (58) f_call -> . identifier opening_par arguments closing_par semicol
    (62) f_call -> . identifier opening_par error closing_par semicol
    (63) print_statement -> . PRINT opening_par print_args closing_par semicol
    (68) print_statement -> . PRINT opening_par error closing_par semicol

    closing_anglbrack shift and go to state 55
    identifier      shift and go to state 44
    IF              shift and go to state 45
    DO              shift and go to state 46
    PRINT           shift and go to state 47

    statement                      shift and go to state 56
    assign                         shift and go to state 39
    condition                      shift and go to state 40
    cycle                          shift and go to state 41
    f_call                         shift and go to state 42
    print_statement                shift and go to state 43

state 38

    (26) statements -> statement .

    closing_anglbrack reduce using rule 26 (statements -> statement .)
    identifier      reduce using rule 26 (statements -> statement .)
    IF              reduce using rule 26 (statements -> statement .)
    DO              reduce using rule 26 (statements -> statement .)
    PRINT           reduce using rule 26 (statements -> statement .)


state 39

    (28) statement -> assign .

    closing_anglbrack reduce using rule 28 (statement -> assign .)
    identifier      reduce using rule 28 (statement -> assign .)
    IF              reduce using rule 28 (statement -> assign .)
    DO              reduce using rule 28 (statement -> assign .)
    PRINT           reduce using rule 28 (statement -> assign .)


state 40

    (29) statement -> condition .

    closing_anglbrack reduce using rule 29 (statement -> condition .)
    identifier      reduce using rule 29 (statement -> condition .)
    IF              reduce using rule 29 (statement -> condition .)
    DO              reduce using rule 29 (statement -> condition .)
    PRINT           reduce using rule 29 (statement -> condition .)


state 41

    (30) statement -> cycle .

    closing_anglbrack reduce using rule 30 (statement -> cycle .)
    identifier      reduce using rule 30 (statement -> cycle .)
    IF              reduce using rule 30 (statement -> cycle .)
    DO              reduce using rule 30 (statement -> cycle .)
    PRINT           reduce using rule 30 (statement -> cycle .)


state 42

    (31) statement -> f_call .

    closing_anglbrack reduce using rule 31 (statement -> f_call .)
    identifier      reduce using rule 31 (statement -> f_call .)
    IF              reduce using rule 31 (statement -> f_call .)
    DO              reduce using rule 31 (statement -> f_call .)
    PRINT           reduce using rule 31 (statement -> f_call .)


state 43

    (32) statement -> print_statement .

    closing_anglbrack reduce using rule 32 (statement -> print_statement .)
    identifier      reduce using rule 32 (statement -> print_statement .)
    IF              reduce using rule 32 (statement -> print_statement .)
    DO              reduce using rule 32 (statement -> print_statement .)
    PRINT           reduce using rule 32 (statement -> print_statement .)


state 44

    (33) assign -> identifier . op_assign expression semicol
    (34) assign -> identifier . op_assign const_string semicol
    (35) assign -> identifier . op_assign error semicol
    (58) f_call -> identifier . opening_par arguments closing_par semicol
    (62) f_call -> identifier . opening_par error closing_par semicol

    op_assign       shift and go to state 57
    opening_par     shift and go to state 58


state 45

    (71) condition -> IF . opening_par expression closing_par body check_else semicol
    (74) condition -> IF . opening_par error closing_par body check_else semicol

    opening_par     shift and go to state 59


state 46

    (69) cycle -> DO . body WHILE opening_par expression closing_par semicol
    (70) cycle -> DO . body WHILE opening_par error closing_par semicol
    (24) body -> . opening_anglbrack statements closing_anglbrack

    opening_anglbrack shift and go to state 27

    body                           shift and go to state 60

state 47

    (63) print_statement -> PRINT . opening_par print_args closing_par semicol
    (68) print_statement -> PRINT . opening_par error closing_par semicol

    opening_par     shift and go to state 61


state 48

    (22) param -> identifier . twopoint type

    twopoint        shift and go to state 62


state 49

    (18) func -> VOID identifier opening_par param_list . closing_par opening_brack vars body closing_brack semicol
    (19) param_list -> param_list . comma param

    closing_par     shift and go to state 63
    comma           shift and go to state 64


state 50

    (23) func -> VOID identifier opening_par error . closing_par opening_brack vars body closing_brack semicol

    closing_par     shift and go to state 65


state 51

    (20) param_list -> param .

    closing_par     reduce using rule 20 (param_list -> param .)
    comma           reduce using rule 20 (param_list -> param .)


state 52

    (7) var_definition -> id_list twopoint type semicol . var_definition
    (8) var_definition -> id_list twopoint type semicol .
    (7) var_definition -> . id_list twopoint type semicol var_definition
    (8) var_definition -> . id_list twopoint type semicol
    (11) var_definition -> . error twopoint type semicol var_definition
    (12) var_definition -> . error twopoint type semicol
    (9) id_list -> . identifier comma id_list
    (10) id_list -> . identifier

    VOID            reduce using rule 8 (var_definition -> id_list twopoint type semicol .)
    MAIN            reduce using rule 8 (var_definition -> id_list twopoint type semicol .)
    opening_anglbrack reduce using rule 8 (var_definition -> id_list twopoint type semicol .)
    error           shift and go to state 16
    identifier      shift and go to state 17

    id_list                        shift and go to state 15
    var_definition                 shift and go to state 66

state 53

    (11) var_definition -> error twopoint type semicol . var_definition
    (12) var_definition -> error twopoint type semicol .
    (7) var_definition -> . id_list twopoint type semicol var_definition
    (8) var_definition -> . id_list twopoint type semicol
    (11) var_definition -> . error twopoint type semicol var_definition
    (12) var_definition -> . error twopoint type semicol
    (9) id_list -> . identifier comma id_list
    (10) id_list -> . identifier

    VOID            reduce using rule 12 (var_definition -> error twopoint type semicol .)
    MAIN            reduce using rule 12 (var_definition -> error twopoint type semicol .)
    opening_anglbrack reduce using rule 12 (var_definition -> error twopoint type semicol .)
    error           shift and go to state 16
    identifier      shift and go to state 17

    var_definition                 shift and go to state 67
    id_list                        shift and go to state 15

state 54

    (1) programa -> PROGRAM identifier create_program semicol vars funcs MAIN body END . elim_program
    (3) elim_program -> .

    $end            reduce using rule 3 (elim_program -> .)

    elim_program                   shift and go to state 68

state 55

    (24) body -> opening_anglbrack statements closing_anglbrack .

    END             reduce using rule 24 (body -> opening_anglbrack statements closing_anglbrack .)
    WHILE           reduce using rule 24 (body -> opening_anglbrack statements closing_anglbrack .)
    ELSE            reduce using rule 24 (body -> opening_anglbrack statements closing_anglbrack .)
    semicol         reduce using rule 24 (body -> opening_anglbrack statements closing_anglbrack .)
    closing_brack   reduce using rule 24 (body -> opening_anglbrack statements closing_anglbrack .)


state 56

    (25) statements -> statements statement .

    closing_anglbrack reduce using rule 25 (statements -> statements statement .)
    identifier      reduce using rule 25 (statements -> statements statement .)
    IF              reduce using rule 25 (statements -> statements statement .)
    DO              reduce using rule 25 (statements -> statements statement .)
    PRINT           reduce using rule 25 (statements -> statements statement .)


state 57

    (33) assign -> identifier op_assign . expression semicol
    (34) assign -> identifier op_assign . const_string semicol
    (35) assign -> identifier op_assign . error semicol
    (36) expression -> . exp
    (37) expression -> . exp op_lesser_than exp
    (38) expression -> . exp op_more_than exp
    (39) expression -> . exp op_lessthan_equal exp
    (40) expression -> . exp op_morethan_equal exp
    (41) expression -> . exp op_equals exp
    (42) expression -> . exp op_not_equal exp
    (43) exp -> . exp op_plus term
    (44) exp -> . exp op_minus term
    (45) exp -> . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    const_string    shift and go to state 71
    error           shift and go to state 72
    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    expression                     shift and go to state 70
    exp                            shift and go to state 73
    term                           shift and go to state 75
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 58

    (58) f_call -> identifier opening_par . arguments closing_par semicol
    (62) f_call -> identifier opening_par . error closing_par semicol
    (59) arguments -> . arguments comma expression
    (60) arguments -> . expression
    (61) arguments -> .
    (36) expression -> . exp
    (37) expression -> . exp op_lesser_than exp
    (38) expression -> . exp op_more_than exp
    (39) expression -> . exp op_lessthan_equal exp
    (40) expression -> . exp op_morethan_equal exp
    (41) expression -> . exp op_equals exp
    (42) expression -> . exp op_not_equal exp
    (43) exp -> . exp op_plus term
    (44) exp -> . exp op_minus term
    (45) exp -> . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    error           shift and go to state 83
    closing_par     reduce using rule 61 (arguments -> .)
    comma           reduce using rule 61 (arguments -> .)
    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    arguments                      shift and go to state 82
    expression                     shift and go to state 84
    exp                            shift and go to state 73
    term                           shift and go to state 75
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 59

    (71) condition -> IF opening_par . expression closing_par body check_else semicol
    (74) condition -> IF opening_par . error closing_par body check_else semicol
    (36) expression -> . exp
    (37) expression -> . exp op_lesser_than exp
    (38) expression -> . exp op_more_than exp
    (39) expression -> . exp op_lessthan_equal exp
    (40) expression -> . exp op_morethan_equal exp
    (41) expression -> . exp op_equals exp
    (42) expression -> . exp op_not_equal exp
    (43) exp -> . exp op_plus term
    (44) exp -> . exp op_minus term
    (45) exp -> . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    error           shift and go to state 86
    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    expression                     shift and go to state 85
    exp                            shift and go to state 73
    term                           shift and go to state 75
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 60

    (69) cycle -> DO body . WHILE opening_par expression closing_par semicol
    (70) cycle -> DO body . WHILE opening_par error closing_par semicol

    WHILE           shift and go to state 87


state 61

    (63) print_statement -> PRINT opening_par . print_args closing_par semicol
    (68) print_statement -> PRINT opening_par . error closing_par semicol
    (64) print_args -> . print_args comma print_arg
    (65) print_args -> . print_arg
    (66) print_arg -> . expression
    (67) print_arg -> . const_string
    (36) expression -> . exp
    (37) expression -> . exp op_lesser_than exp
    (38) expression -> . exp op_more_than exp
    (39) expression -> . exp op_lessthan_equal exp
    (40) expression -> . exp op_morethan_equal exp
    (41) expression -> . exp op_equals exp
    (42) expression -> . exp op_not_equal exp
    (43) exp -> . exp op_plus term
    (44) exp -> . exp op_minus term
    (45) exp -> . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    error           shift and go to state 89
    const_string    shift and go to state 92
    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    print_args                     shift and go to state 88
    print_arg                      shift and go to state 90
    expression                     shift and go to state 91
    exp                            shift and go to state 73
    term                           shift and go to state 75
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 62

    (22) param -> identifier twopoint . type
    (13) type -> . INTEGER
    (14) type -> . FLOAT
    (15) type -> . STRING

    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    type                           shift and go to state 93

state 63

    (18) func -> VOID identifier opening_par param_list closing_par . opening_brack vars body closing_brack semicol

    opening_brack   shift and go to state 94


state 64

    (19) param_list -> param_list comma . param
    (22) param -> . identifier twopoint type

    identifier      shift and go to state 48

    param                          shift and go to state 95

state 65

    (23) func -> VOID identifier opening_par error closing_par . opening_brack vars body closing_brack semicol

    opening_brack   shift and go to state 96


state 66

    (7) var_definition -> id_list twopoint type semicol var_definition .

    VOID            reduce using rule 7 (var_definition -> id_list twopoint type semicol var_definition .)
    MAIN            reduce using rule 7 (var_definition -> id_list twopoint type semicol var_definition .)
    opening_anglbrack reduce using rule 7 (var_definition -> id_list twopoint type semicol var_definition .)


state 67

    (11) var_definition -> error twopoint type semicol var_definition .

    VOID            reduce using rule 11 (var_definition -> error twopoint type semicol var_definition .)
    MAIN            reduce using rule 11 (var_definition -> error twopoint type semicol var_definition .)
    opening_anglbrack reduce using rule 11 (var_definition -> error twopoint type semicol var_definition .)


state 68

    (1) programa -> PROGRAM identifier create_program semicol vars funcs MAIN body END elim_program .

    $end            reduce using rule 1 (programa -> PROGRAM identifier create_program semicol vars funcs MAIN body END elim_program .)


state 69

    (54) factor -> identifier .

    op_mult         reduce using rule 54 (factor -> identifier .)
    op_div          reduce using rule 54 (factor -> identifier .)
    op_lesser_than  reduce using rule 54 (factor -> identifier .)
    op_more_than    reduce using rule 54 (factor -> identifier .)
    op_lessthan_equal reduce using rule 54 (factor -> identifier .)
    op_morethan_equal reduce using rule 54 (factor -> identifier .)
    op_equals       reduce using rule 54 (factor -> identifier .)
    op_not_equal    reduce using rule 54 (factor -> identifier .)
    op_plus         reduce using rule 54 (factor -> identifier .)
    op_minus        reduce using rule 54 (factor -> identifier .)
    semicol         reduce using rule 54 (factor -> identifier .)
    closing_par     reduce using rule 54 (factor -> identifier .)
    comma           reduce using rule 54 (factor -> identifier .)


state 70

    (33) assign -> identifier op_assign expression . semicol

    semicol         shift and go to state 97


state 71

    (34) assign -> identifier op_assign const_string . semicol

    semicol         shift and go to state 98


state 72

    (35) assign -> identifier op_assign error . semicol

    semicol         shift and go to state 99


state 73

    (36) expression -> exp .
    (37) expression -> exp . op_lesser_than exp
    (38) expression -> exp . op_more_than exp
    (39) expression -> exp . op_lessthan_equal exp
    (40) expression -> exp . op_morethan_equal exp
    (41) expression -> exp . op_equals exp
    (42) expression -> exp . op_not_equal exp
    (43) exp -> exp . op_plus term
    (44) exp -> exp . op_minus term

    semicol         reduce using rule 36 (expression -> exp .)
    closing_par     reduce using rule 36 (expression -> exp .)
    comma           reduce using rule 36 (expression -> exp .)
    op_lesser_than  shift and go to state 100
    op_more_than    shift and go to state 101
    op_lessthan_equal shift and go to state 102
    op_morethan_equal shift and go to state 103
    op_equals       shift and go to state 104
    op_not_equal    shift and go to state 105
    op_plus         shift and go to state 106
    op_minus        shift and go to state 107


state 74

    (50) factor -> op_plus . identifier
    (51) factor -> op_plus . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    identifier      shift and go to state 108
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    cte                            shift and go to state 109

state 75

    (45) exp -> term .
    (46) term -> term . op_mult factor
    (47) term -> term . op_div factor

    op_lesser_than  reduce using rule 45 (exp -> term .)
    op_more_than    reduce using rule 45 (exp -> term .)
    op_lessthan_equal reduce using rule 45 (exp -> term .)
    op_morethan_equal reduce using rule 45 (exp -> term .)
    op_equals       reduce using rule 45 (exp -> term .)
    op_not_equal    reduce using rule 45 (exp -> term .)
    op_plus         reduce using rule 45 (exp -> term .)
    op_minus        reduce using rule 45 (exp -> term .)
    semicol         reduce using rule 45 (exp -> term .)
    closing_par     reduce using rule 45 (exp -> term .)
    comma           reduce using rule 45 (exp -> term .)
    op_mult         shift and go to state 110
    op_div          shift and go to state 111


state 76

    (52) factor -> op_minus . identifier
    (53) factor -> op_minus . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    identifier      shift and go to state 112
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    cte                            shift and go to state 113

state 77

    (48) term -> factor .

    op_mult         reduce using rule 48 (term -> factor .)
    op_div          reduce using rule 48 (term -> factor .)
    op_lesser_than  reduce using rule 48 (term -> factor .)
    op_more_than    reduce using rule 48 (term -> factor .)
    op_lessthan_equal reduce using rule 48 (term -> factor .)
    op_morethan_equal reduce using rule 48 (term -> factor .)
    op_equals       reduce using rule 48 (term -> factor .)
    op_not_equal    reduce using rule 48 (term -> factor .)
    op_plus         reduce using rule 48 (term -> factor .)
    op_minus        reduce using rule 48 (term -> factor .)
    semicol         reduce using rule 48 (term -> factor .)
    closing_par     reduce using rule 48 (term -> factor .)
    comma           reduce using rule 48 (term -> factor .)


state 78

    (49) factor -> opening_par . expression closing_par
    (36) expression -> . exp
    (37) expression -> . exp op_lesser_than exp
    (38) expression -> . exp op_more_than exp
    (39) expression -> . exp op_lessthan_equal exp
    (40) expression -> . exp op_morethan_equal exp
    (41) expression -> . exp op_equals exp
    (42) expression -> . exp op_not_equal exp
    (43) exp -> . exp op_plus term
    (44) exp -> . exp op_minus term
    (45) exp -> . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    expression                     shift and go to state 114
    exp                            shift and go to state 73
    term                           shift and go to state 75
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 79

    (55) factor -> cte .

    op_mult         reduce using rule 55 (factor -> cte .)
    op_div          reduce using rule 55 (factor -> cte .)
    op_lesser_than  reduce using rule 55 (factor -> cte .)
    op_more_than    reduce using rule 55 (factor -> cte .)
    op_lessthan_equal reduce using rule 55 (factor -> cte .)
    op_morethan_equal reduce using rule 55 (factor -> cte .)
    op_equals       reduce using rule 55 (factor -> cte .)
    op_not_equal    reduce using rule 55 (factor -> cte .)
    op_plus         reduce using rule 55 (factor -> cte .)
    op_minus        reduce using rule 55 (factor -> cte .)
    semicol         reduce using rule 55 (factor -> cte .)
    closing_par     reduce using rule 55 (factor -> cte .)
    comma           reduce using rule 55 (factor -> cte .)


state 80

    (56) cte -> const_int .

    op_mult         reduce using rule 56 (cte -> const_int .)
    op_div          reduce using rule 56 (cte -> const_int .)
    op_lesser_than  reduce using rule 56 (cte -> const_int .)
    op_more_than    reduce using rule 56 (cte -> const_int .)
    op_lessthan_equal reduce using rule 56 (cte -> const_int .)
    op_morethan_equal reduce using rule 56 (cte -> const_int .)
    op_equals       reduce using rule 56 (cte -> const_int .)
    op_not_equal    reduce using rule 56 (cte -> const_int .)
    op_plus         reduce using rule 56 (cte -> const_int .)
    op_minus        reduce using rule 56 (cte -> const_int .)
    semicol         reduce using rule 56 (cte -> const_int .)
    closing_par     reduce using rule 56 (cte -> const_int .)
    comma           reduce using rule 56 (cte -> const_int .)


state 81

    (57) cte -> const_float .

    op_mult         reduce using rule 57 (cte -> const_float .)
    op_div          reduce using rule 57 (cte -> const_float .)
    op_lesser_than  reduce using rule 57 (cte -> const_float .)
    op_more_than    reduce using rule 57 (cte -> const_float .)
    op_lessthan_equal reduce using rule 57 (cte -> const_float .)
    op_morethan_equal reduce using rule 57 (cte -> const_float .)
    op_equals       reduce using rule 57 (cte -> const_float .)
    op_not_equal    reduce using rule 57 (cte -> const_float .)
    op_plus         reduce using rule 57 (cte -> const_float .)
    op_minus        reduce using rule 57 (cte -> const_float .)
    semicol         reduce using rule 57 (cte -> const_float .)
    closing_par     reduce using rule 57 (cte -> const_float .)
    comma           reduce using rule 57 (cte -> const_float .)


state 82

    (58) f_call -> identifier opening_par arguments . closing_par semicol
    (59) arguments -> arguments . comma expression

    closing_par     shift and go to state 115
    comma           shift and go to state 116


state 83

    (62) f_call -> identifier opening_par error . closing_par semicol

    closing_par     shift and go to state 117


state 84

    (60) arguments -> expression .

    closing_par     reduce using rule 60 (arguments -> expression .)
    comma           reduce using rule 60 (arguments -> expression .)


state 85

    (71) condition -> IF opening_par expression . closing_par body check_else semicol

    closing_par     shift and go to state 118


state 86

    (74) condition -> IF opening_par error . closing_par body check_else semicol

    closing_par     shift and go to state 119


state 87

    (69) cycle -> DO body WHILE . opening_par expression closing_par semicol
    (70) cycle -> DO body WHILE . opening_par error closing_par semicol

    opening_par     shift and go to state 120


state 88

    (63) print_statement -> PRINT opening_par print_args . closing_par semicol
    (64) print_args -> print_args . comma print_arg

    closing_par     shift and go to state 121
    comma           shift and go to state 122


state 89

    (68) print_statement -> PRINT opening_par error . closing_par semicol

    closing_par     shift and go to state 123


state 90

    (65) print_args -> print_arg .

    closing_par     reduce using rule 65 (print_args -> print_arg .)
    comma           reduce using rule 65 (print_args -> print_arg .)


state 91

    (66) print_arg -> expression .

    closing_par     reduce using rule 66 (print_arg -> expression .)
    comma           reduce using rule 66 (print_arg -> expression .)


state 92

    (67) print_arg -> const_string .

    closing_par     reduce using rule 67 (print_arg -> const_string .)
    comma           reduce using rule 67 (print_arg -> const_string .)


state 93

    (22) param -> identifier twopoint type .

    closing_par     reduce using rule 22 (param -> identifier twopoint type .)
    comma           reduce using rule 22 (param -> identifier twopoint type .)


state 94

    (18) func -> VOID identifier opening_par param_list closing_par opening_brack . vars body closing_brack semicol
    (5) vars -> . VAR var_definition
    (6) vars -> .

    VAR             shift and go to state 9
    opening_anglbrack reduce using rule 6 (vars -> .)

    vars                           shift and go to state 124

state 95

    (19) param_list -> param_list comma param .

    closing_par     reduce using rule 19 (param_list -> param_list comma param .)
    comma           reduce using rule 19 (param_list -> param_list comma param .)


state 96

    (23) func -> VOID identifier opening_par error closing_par opening_brack . vars body closing_brack semicol
    (5) vars -> . VAR var_definition
    (6) vars -> .

    VAR             shift and go to state 9
    opening_anglbrack reduce using rule 6 (vars -> .)

    vars                           shift and go to state 125

state 97

    (33) assign -> identifier op_assign expression semicol .

    closing_anglbrack reduce using rule 33 (assign -> identifier op_assign expression semicol .)
    identifier      reduce using rule 33 (assign -> identifier op_assign expression semicol .)
    IF              reduce using rule 33 (assign -> identifier op_assign expression semicol .)
    DO              reduce using rule 33 (assign -> identifier op_assign expression semicol .)
    PRINT           reduce using rule 33 (assign -> identifier op_assign expression semicol .)


state 98

    (34) assign -> identifier op_assign const_string semicol .

    closing_anglbrack reduce using rule 34 (assign -> identifier op_assign const_string semicol .)
    identifier      reduce using rule 34 (assign -> identifier op_assign const_string semicol .)
    IF              reduce using rule 34 (assign -> identifier op_assign const_string semicol .)
    DO              reduce using rule 34 (assign -> identifier op_assign const_string semicol .)
    PRINT           reduce using rule 34 (assign -> identifier op_assign const_string semicol .)


state 99

    (35) assign -> identifier op_assign error semicol .

    closing_anglbrack reduce using rule 35 (assign -> identifier op_assign error semicol .)
    identifier      reduce using rule 35 (assign -> identifier op_assign error semicol .)
    IF              reduce using rule 35 (assign -> identifier op_assign error semicol .)
    DO              reduce using rule 35 (assign -> identifier op_assign error semicol .)
    PRINT           reduce using rule 35 (assign -> identifier op_assign error semicol .)


state 100

    (37) expression -> exp op_lesser_than . exp
    (43) exp -> . exp op_plus term
    (44) exp -> . exp op_minus term
    (45) exp -> . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    exp                            shift and go to state 126
    term                           shift and go to state 75
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 101

    (38) expression -> exp op_more_than . exp
    (43) exp -> . exp op_plus term
    (44) exp -> . exp op_minus term
    (45) exp -> . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    exp                            shift and go to state 127
    term                           shift and go to state 75
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 102

    (39) expression -> exp op_lessthan_equal . exp
    (43) exp -> . exp op_plus term
    (44) exp -> . exp op_minus term
    (45) exp -> . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    exp                            shift and go to state 128
    term                           shift and go to state 75
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 103

    (40) expression -> exp op_morethan_equal . exp
    (43) exp -> . exp op_plus term
    (44) exp -> . exp op_minus term
    (45) exp -> . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    exp                            shift and go to state 129
    term                           shift and go to state 75
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 104

    (41) expression -> exp op_equals . exp
    (43) exp -> . exp op_plus term
    (44) exp -> . exp op_minus term
    (45) exp -> . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    exp                            shift and go to state 130
    term                           shift and go to state 75
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 105

    (42) expression -> exp op_not_equal . exp
    (43) exp -> . exp op_plus term
    (44) exp -> . exp op_minus term
    (45) exp -> . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    exp                            shift and go to state 131
    term                           shift and go to state 75
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 106

    (43) exp -> exp op_plus . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    term                           shift and go to state 132
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 107

    (44) exp -> exp op_minus . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    term                           shift and go to state 133
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 108

    (50) factor -> op_plus identifier .

    op_mult         reduce using rule 50 (factor -> op_plus identifier .)
    op_div          reduce using rule 50 (factor -> op_plus identifier .)
    op_lesser_than  reduce using rule 50 (factor -> op_plus identifier .)
    op_more_than    reduce using rule 50 (factor -> op_plus identifier .)
    op_lessthan_equal reduce using rule 50 (factor -> op_plus identifier .)
    op_morethan_equal reduce using rule 50 (factor -> op_plus identifier .)
    op_equals       reduce using rule 50 (factor -> op_plus identifier .)
    op_not_equal    reduce using rule 50 (factor -> op_plus identifier .)
    op_plus         reduce using rule 50 (factor -> op_plus identifier .)
    op_minus        reduce using rule 50 (factor -> op_plus identifier .)
    semicol         reduce using rule 50 (factor -> op_plus identifier .)
    closing_par     reduce using rule 50 (factor -> op_plus identifier .)
    comma           reduce using rule 50 (factor -> op_plus identifier .)


state 109

    (51) factor -> op_plus cte .

    op_mult         reduce using rule 51 (factor -> op_plus cte .)
    op_div          reduce using rule 51 (factor -> op_plus cte .)
    op_lesser_than  reduce using rule 51 (factor -> op_plus cte .)
    op_more_than    reduce using rule 51 (factor -> op_plus cte .)
    op_lessthan_equal reduce using rule 51 (factor -> op_plus cte .)
    op_morethan_equal reduce using rule 51 (factor -> op_plus cte .)
    op_equals       reduce using rule 51 (factor -> op_plus cte .)
    op_not_equal    reduce using rule 51 (factor -> op_plus cte .)
    op_plus         reduce using rule 51 (factor -> op_plus cte .)
    op_minus        reduce using rule 51 (factor -> op_plus cte .)
    semicol         reduce using rule 51 (factor -> op_plus cte .)
    closing_par     reduce using rule 51 (factor -> op_plus cte .)
    comma           reduce using rule 51 (factor -> op_plus cte .)


state 110

    (46) term -> term op_mult . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    factor                         shift and go to state 134
    cte                            shift and go to state 79

state 111

    (47) term -> term op_div . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    factor                         shift and go to state 135
    cte                            shift and go to state 79

state 112

    (52) factor -> op_minus identifier .

    op_mult         reduce using rule 52 (factor -> op_minus identifier .)
    op_div          reduce using rule 52 (factor -> op_minus identifier .)
    op_lesser_than  reduce using rule 52 (factor -> op_minus identifier .)
    op_more_than    reduce using rule 52 (factor -> op_minus identifier .)
    op_lessthan_equal reduce using rule 52 (factor -> op_minus identifier .)
    op_morethan_equal reduce using rule 52 (factor -> op_minus identifier .)
    op_equals       reduce using rule 52 (factor -> op_minus identifier .)
    op_not_equal    reduce using rule 52 (factor -> op_minus identifier .)
    op_plus         reduce using rule 52 (factor -> op_minus identifier .)
    op_minus        reduce using rule 52 (factor -> op_minus identifier .)
    semicol         reduce using rule 52 (factor -> op_minus identifier .)
    closing_par     reduce using rule 52 (factor -> op_minus identifier .)
    comma           reduce using rule 52 (factor -> op_minus identifier .)


state 113

    (53) factor -> op_minus cte .

    op_mult         reduce using rule 53 (factor -> op_minus cte .)
    op_div          reduce using rule 53 (factor -> op_minus cte .)
    op_lesser_than  reduce using rule 53 (factor -> op_minus cte .)
    op_more_than    reduce using rule 53 (factor -> op_minus cte .)
    op_lessthan_equal reduce using rule 53 (factor -> op_minus cte .)
    op_morethan_equal reduce using rule 53 (factor -> op_minus cte .)
    op_equals       reduce using rule 53 (factor -> op_minus cte .)
    op_not_equal    reduce using rule 53 (factor -> op_minus cte .)
    op_plus         reduce using rule 53 (factor -> op_minus cte .)
    op_minus        reduce using rule 53 (factor -> op_minus cte .)
    semicol         reduce using rule 53 (factor -> op_minus cte .)
    closing_par     reduce using rule 53 (factor -> op_minus cte .)
    comma           reduce using rule 53 (factor -> op_minus cte .)


state 114

    (49) factor -> opening_par expression . closing_par

    closing_par     shift and go to state 136


state 115

    (58) f_call -> identifier opening_par arguments closing_par . semicol

    semicol         shift and go to state 137


state 116

    (59) arguments -> arguments comma . expression
    (36) expression -> . exp
    (37) expression -> . exp op_lesser_than exp
    (38) expression -> . exp op_more_than exp
    (39) expression -> . exp op_lessthan_equal exp
    (40) expression -> . exp op_morethan_equal exp
    (41) expression -> . exp op_equals exp
    (42) expression -> . exp op_not_equal exp
    (43) exp -> . exp op_plus term
    (44) exp -> . exp op_minus term
    (45) exp -> . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    expression                     shift and go to state 138
    exp                            shift and go to state 73
    term                           shift and go to state 75
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 117

    (62) f_call -> identifier opening_par error closing_par . semicol

    semicol         shift and go to state 139


state 118

    (71) condition -> IF opening_par expression closing_par . body check_else semicol
    (24) body -> . opening_anglbrack statements closing_anglbrack

    opening_anglbrack shift and go to state 27

    body                           shift and go to state 140

state 119

    (74) condition -> IF opening_par error closing_par . body check_else semicol
    (24) body -> . opening_anglbrack statements closing_anglbrack

    opening_anglbrack shift and go to state 27

    body                           shift and go to state 141

state 120

    (69) cycle -> DO body WHILE opening_par . expression closing_par semicol
    (70) cycle -> DO body WHILE opening_par . error closing_par semicol
    (36) expression -> . exp
    (37) expression -> . exp op_lesser_than exp
    (38) expression -> . exp op_more_than exp
    (39) expression -> . exp op_lessthan_equal exp
    (40) expression -> . exp op_morethan_equal exp
    (41) expression -> . exp op_equals exp
    (42) expression -> . exp op_not_equal exp
    (43) exp -> . exp op_plus term
    (44) exp -> . exp op_minus term
    (45) exp -> . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    error           shift and go to state 143
    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    expression                     shift and go to state 142
    exp                            shift and go to state 73
    term                           shift and go to state 75
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 121

    (63) print_statement -> PRINT opening_par print_args closing_par . semicol

    semicol         shift and go to state 144


state 122

    (64) print_args -> print_args comma . print_arg
    (66) print_arg -> . expression
    (67) print_arg -> . const_string
    (36) expression -> . exp
    (37) expression -> . exp op_lesser_than exp
    (38) expression -> . exp op_more_than exp
    (39) expression -> . exp op_lessthan_equal exp
    (40) expression -> . exp op_morethan_equal exp
    (41) expression -> . exp op_equals exp
    (42) expression -> . exp op_not_equal exp
    (43) exp -> . exp op_plus term
    (44) exp -> . exp op_minus term
    (45) exp -> . term
    (46) term -> . term op_mult factor
    (47) term -> . term op_div factor
    (48) term -> . factor
    (49) factor -> . opening_par expression closing_par
    (50) factor -> . op_plus identifier
    (51) factor -> . op_plus cte
    (52) factor -> . op_minus identifier
    (53) factor -> . op_minus cte
    (54) factor -> . identifier
    (55) factor -> . cte
    (56) cte -> . const_int
    (57) cte -> . const_float

    const_string    shift and go to state 92
    opening_par     shift and go to state 78
    op_plus         shift and go to state 74
    op_minus        shift and go to state 76
    identifier      shift and go to state 69
    const_int       shift and go to state 80
    const_float     shift and go to state 81

    print_arg                      shift and go to state 145
    expression                     shift and go to state 91
    exp                            shift and go to state 73
    term                           shift and go to state 75
    factor                         shift and go to state 77
    cte                            shift and go to state 79

state 123

    (68) print_statement -> PRINT opening_par error closing_par . semicol

    semicol         shift and go to state 146


state 124

    (18) func -> VOID identifier opening_par param_list closing_par opening_brack vars . body closing_brack semicol
    (24) body -> . opening_anglbrack statements closing_anglbrack

    opening_anglbrack shift and go to state 27

    body                           shift and go to state 147

state 125

    (23) func -> VOID identifier opening_par error closing_par opening_brack vars . body closing_brack semicol
    (24) body -> . opening_anglbrack statements closing_anglbrack

    opening_anglbrack shift and go to state 27

    body                           shift and go to state 148

state 126

    (37) expression -> exp op_lesser_than exp .
    (43) exp -> exp . op_plus term
    (44) exp -> exp . op_minus term

    semicol         reduce using rule 37 (expression -> exp op_lesser_than exp .)
    closing_par     reduce using rule 37 (expression -> exp op_lesser_than exp .)
    comma           reduce using rule 37 (expression -> exp op_lesser_than exp .)
    op_plus         shift and go to state 106
    op_minus        shift and go to state 107


state 127

    (38) expression -> exp op_more_than exp .
    (43) exp -> exp . op_plus term
    (44) exp -> exp . op_minus term

    semicol         reduce using rule 38 (expression -> exp op_more_than exp .)
    closing_par     reduce using rule 38 (expression -> exp op_more_than exp .)
    comma           reduce using rule 38 (expression -> exp op_more_than exp .)
    op_plus         shift and go to state 106
    op_minus        shift and go to state 107


state 128

    (39) expression -> exp op_lessthan_equal exp .
    (43) exp -> exp . op_plus term
    (44) exp -> exp . op_minus term

    semicol         reduce using rule 39 (expression -> exp op_lessthan_equal exp .)
    closing_par     reduce using rule 39 (expression -> exp op_lessthan_equal exp .)
    comma           reduce using rule 39 (expression -> exp op_lessthan_equal exp .)
    op_plus         shift and go to state 106
    op_minus        shift and go to state 107


state 129

    (40) expression -> exp op_morethan_equal exp .
    (43) exp -> exp . op_plus term
    (44) exp -> exp . op_minus term

    semicol         reduce using rule 40 (expression -> exp op_morethan_equal exp .)
    closing_par     reduce using rule 40 (expression -> exp op_morethan_equal exp .)
    comma           reduce using rule 40 (expression -> exp op_morethan_equal exp .)
    op_plus         shift and go to state 106
    op_minus        shift and go to state 107


state 130

    (41) expression -> exp op_equals exp .
    (43) exp -> exp . op_plus term
    (44) exp -> exp . op_minus term

    semicol         reduce using rule 41 (expression -> exp op_equals exp .)
    closing_par     reduce using rule 41 (expression -> exp op_equals exp .)
    comma           reduce using rule 41 (expression -> exp op_equals exp .)
    op_plus         shift and go to state 106
    op_minus        shift and go to state 107


state 131

    (42) expression -> exp op_not_equal exp .
    (43) exp -> exp . op_plus term
    (44) exp -> exp . op_minus term

    semicol         reduce using rule 42 (expression -> exp op_not_equal exp .)
    closing_par     reduce using rule 42 (expression -> exp op_not_equal exp .)
    comma           reduce using rule 42 (expression -> exp op_not_equal exp .)
    op_plus         shift and go to state 106
    op_minus        shift and go to state 107


state 132

    (43) exp -> exp op_plus term .
    (46) term -> term . op_mult factor
    (47) term -> term . op_div factor

    op_lesser_than  reduce using rule 43 (exp -> exp op_plus term .)
    op_more_than    reduce using rule 43 (exp -> exp op_plus term .)
    op_lessthan_equal reduce using rule 43 (exp -> exp op_plus term .)
    op_morethan_equal reduce using rule 43 (exp -> exp op_plus term .)
    op_equals       reduce using rule 43 (exp -> exp op_plus term .)
    op_not_equal    reduce using rule 43 (exp -> exp op_plus term .)
    op_plus         reduce using rule 43 (exp -> exp op_plus term .)
    op_minus        reduce using rule 43 (exp -> exp op_plus term .)
    semicol         reduce using rule 43 (exp -> exp op_plus term .)
    closing_par     reduce using rule 43 (exp -> exp op_plus term .)
    comma           reduce using rule 43 (exp -> exp op_plus term .)
    op_mult         shift and go to state 110
    op_div          shift and go to state 111


state 133

    (44) exp -> exp op_minus term .
    (46) term -> term . op_mult factor
    (47) term -> term . op_div factor

    op_lesser_than  reduce using rule 44 (exp -> exp op_minus term .)
    op_more_than    reduce using rule 44 (exp -> exp op_minus term .)
    op_lessthan_equal reduce using rule 44 (exp -> exp op_minus term .)
    op_morethan_equal reduce using rule 44 (exp -> exp op_minus term .)
    op_equals       reduce using rule 44 (exp -> exp op_minus term .)
    op_not_equal    reduce using rule 44 (exp -> exp op_minus term .)
    op_plus         reduce using rule 44 (exp -> exp op_minus term .)
    op_minus        reduce using rule 44 (exp -> exp op_minus term .)
    semicol         reduce using rule 44 (exp -> exp op_minus term .)
    closing_par     reduce using rule 44 (exp -> exp op_minus term .)
    comma           reduce using rule 44 (exp -> exp op_minus term .)
    op_mult         shift and go to state 110
    op_div          shift and go to state 111


state 134

    (46) term -> term op_mult factor .

    op_mult         reduce using rule 46 (term -> term op_mult factor .)
    op_div          reduce using rule 46 (term -> term op_mult factor .)
    op_lesser_than  reduce using rule 46 (term -> term op_mult factor .)
    op_more_than    reduce using rule 46 (term -> term op_mult factor .)
    op_lessthan_equal reduce using rule 46 (term -> term op_mult factor .)
    op_morethan_equal reduce using rule 46 (term -> term op_mult factor .)
    op_equals       reduce using rule 46 (term -> term op_mult factor .)
    op_not_equal    reduce using rule 46 (term -> term op_mult factor .)
    op_plus         reduce using rule 46 (term -> term op_mult factor .)
    op_minus        reduce using rule 46 (term -> term op_mult factor .)
    semicol         reduce using rule 46 (term -> term op_mult factor .)
    closing_par     reduce using rule 46 (term -> term op_mult factor .)
    comma           reduce using rule 46 (term -> term op_mult factor .)


state 135

    (47) term -> term op_div factor .

    op_mult         reduce using rule 47 (term -> term op_div factor .)
    op_div          reduce using rule 47 (term -> term op_div factor .)
    op_lesser_than  reduce using rule 47 (term -> term op_div factor .)
    op_more_than    reduce using rule 47 (term -> term op_div factor .)
    op_lessthan_equal reduce using rule 47 (term -> term op_div factor .)
    op_morethan_equal reduce using rule 47 (term -> term op_div factor .)
    op_equals       reduce using rule 47 (term -> term op_div factor .)
    op_not_equal    reduce using rule 47 (term -> term op_div factor .)
    op_plus         reduce using rule 47 (term -> term op_div factor .)
    op_minus        reduce using rule 47 (term -> term op_div factor .)
    semicol         reduce using rule 47 (term -> term op_div factor .)
    closing_par     reduce using rule 47 (term -> term op_div factor .)
    comma           reduce using rule 47 (term -> term op_div factor .)


state 136

    (49) factor -> opening_par expression closing_par .

    op_mult         reduce using rule 49 (factor -> opening_par expression closing_par .)
    op_div          reduce using rule 49 (factor -> opening_par expression closing_par .)
    op_lesser_than  reduce using rule 49 (factor -> opening_par expression closing_par .)
    op_more_than    reduce using rule 49 (factor -> opening_par expression closing_par .)
    op_lessthan_equal reduce using rule 49 (factor -> opening_par expression closing_par .)
    op_morethan_equal reduce using rule 49 (factor -> opening_par expression closing_par .)
    op_equals       reduce using rule 49 (factor -> opening_par expression closing_par .)
    op_not_equal    reduce using rule 49 (factor -> opening_par expression closing_par .)
    op_plus         reduce using rule 49 (factor -> opening_par expression closing_par .)
    op_minus        reduce using rule 49 (factor -> opening_par expression closing_par .)
    semicol         reduce using rule 49 (factor -> opening_par expression closing_par .)
    closing_par     reduce using rule 49 (factor -> opening_par expression closing_par .)
    comma           reduce using rule 49 (factor -> opening_par expression closing_par .)


state 137

    (58) f_call -> identifier opening_par arguments closing_par semicol .

    closing_anglbrack reduce using rule 58 (f_call -> identifier opening_par arguments closing_par semicol .)
    identifier      reduce using rule 58 (f_call -> identifier opening_par arguments closing_par semicol .)
    IF              reduce using rule 58 (f_call -> identifier opening_par arguments closing_par semicol .)
    DO              reduce using rule 58 (f_call -> identifier opening_par arguments closing_par semicol .)
    PRINT           reduce using rule 58 (f_call -> identifier opening_par arguments closing_par semicol .)


state 138

    (59) arguments -> arguments comma expression .

    closing_par     reduce using rule 59 (arguments -> arguments comma expression .)
    comma           reduce using rule 59 (arguments -> arguments comma expression .)


state 139

    (62) f_call -> identifier opening_par error closing_par semicol .

    closing_anglbrack reduce using rule 62 (f_call -> identifier opening_par error closing_par semicol .)
    identifier      reduce using rule 62 (f_call -> identifier opening_par error closing_par semicol .)
    IF              reduce using rule 62 (f_call -> identifier opening_par error closing_par semicol .)
    DO              reduce using rule 62 (f_call -> identifier opening_par error closing_par semicol .)
    PRINT           reduce using rule 62 (f_call -> identifier opening_par error closing_par semicol .)


state 140

    (71) condition -> IF opening_par expression closing_par body . check_else semicol
    (72) check_else -> . ELSE body
    (73) check_else -> .

    ELSE            shift and go to state 150
    semicol         reduce using rule 73 (check_else -> .)

    check_else                     shift and go to state 149

state 141

    (74) condition -> IF opening_par error closing_par body . check_else semicol
    (72) check_else -> . ELSE body
    (73) check_else -> .

    ELSE            shift and go to state 150
    semicol         reduce using rule 73 (check_else -> .)

    check_else                     shift and go to state 151

state 142

    (69) cycle -> DO body WHILE opening_par expression . closing_par semicol

    closing_par     shift and go to state 152


state 143

    (70) cycle -> DO body WHILE opening_par error . closing_par semicol

    closing_par     shift and go to state 153


state 144

    (63) print_statement -> PRINT opening_par print_args closing_par semicol .

    closing_anglbrack reduce using rule 63 (print_statement -> PRINT opening_par print_args closing_par semicol .)
    identifier      reduce using rule 63 (print_statement -> PRINT opening_par print_args closing_par semicol .)
    IF              reduce using rule 63 (print_statement -> PRINT opening_par print_args closing_par semicol .)
    DO              reduce using rule 63 (print_statement -> PRINT opening_par print_args closing_par semicol .)
    PRINT           reduce using rule 63 (print_statement -> PRINT opening_par print_args closing_par semicol .)


state 145

    (64) print_args -> print_args comma print_arg .

    closing_par     reduce using rule 64 (print_args -> print_args comma print_arg .)
    comma           reduce using rule 64 (print_args -> print_args comma print_arg .)


state 146

    (68) print_statement -> PRINT opening_par error closing_par semicol .

    closing_anglbrack reduce using rule 68 (print_statement -> PRINT opening_par error closing_par semicol .)
    identifier      reduce using rule 68 (print_statement -> PRINT opening_par error closing_par semicol .)
    IF              reduce using rule 68 (print_statement -> PRINT opening_par error closing_par semicol .)
    DO              reduce using rule 68 (print_statement -> PRINT opening_par error closing_par semicol .)
    PRINT           reduce using rule 68 (print_statement -> PRINT opening_par error closing_par semicol .)


state 147

    (18) func -> VOID identifier opening_par param_list closing_par opening_brack vars body . closing_brack semicol

    closing_brack   shift and go to state 154


state 148

    (23) func -> VOID identifier opening_par error closing_par opening_brack vars body . closing_brack semicol

    closing_brack   shift and go to state 155


state 149

    (71) condition -> IF opening_par expression closing_par body check_else . semicol

    semicol         shift and go to state 156


state 150

    (72) check_else -> ELSE . body
    (24) body -> . opening_anglbrack statements closing_anglbrack

    opening_anglbrack shift and go to state 27

    body                           shift and go to state 157

state 151

    (74) condition -> IF opening_par error closing_par body check_else . semicol

    semicol         shift and go to state 158


state 152

    (69) cycle -> DO body WHILE opening_par expression closing_par . semicol

    semicol         shift and go to state 159


state 153

    (70) cycle -> DO body WHILE opening_par error closing_par . semicol

    semicol         shift and go to state 160


state 154

    (18) func -> VOID identifier opening_par param_list closing_par opening_brack vars body closing_brack . semicol

    semicol         shift and go to state 161


state 155

    (23) func -> VOID identifier opening_par error closing_par opening_brack vars body closing_brack . semicol

    semicol         shift and go to state 162


state 156

    (71) condition -> IF opening_par expression closing_par body check_else semicol .

    closing_anglbrack reduce using rule 71 (condition -> IF opening_par expression closing_par body check_else semicol .)
    identifier      reduce using rule 71 (condition -> IF opening_par expression closing_par body check_else semicol .)
    IF              reduce using rule 71 (condition -> IF opening_par expression closing_par body check_else semicol .)
    DO              reduce using rule 71 (condition -> IF opening_par expression closing_par body check_else semicol .)
    PRINT           reduce using rule 71 (condition -> IF opening_par expression closing_par body check_else semicol .)


state 157

    (72) check_else -> ELSE body .

    semicol         reduce using rule 72 (check_else -> ELSE body .)


state 158

    (74) condition -> IF opening_par error closing_par body check_else semicol .

    closing_anglbrack reduce using rule 74 (condition -> IF opening_par error closing_par body check_else semicol .)
    identifier      reduce using rule 74 (condition -> IF opening_par error closing_par body check_else semicol .)
    IF              reduce using rule 74 (condition -> IF opening_par error closing_par body check_else semicol .)
    DO              reduce using rule 74 (condition -> IF opening_par error closing_par body check_else semicol .)
    PRINT           reduce using rule 74 (condition -> IF opening_par error closing_par body check_else semicol .)


state 159

    (69) cycle -> DO body WHILE opening_par expression closing_par semicol .

    closing_anglbrack reduce using rule 69 (cycle -> DO body WHILE opening_par expression closing_par semicol .)
    identifier      reduce using rule 69 (cycle -> DO body WHILE opening_par expression closing_par semicol .)
    IF              reduce using rule 69 (cycle -> DO body WHILE opening_par expression closing_par semicol .)
    DO              reduce using rule 69 (cycle -> DO body WHILE opening_par expression closing_par semicol .)
    PRINT           reduce using rule 69 (cycle -> DO body WHILE opening_par expression closing_par semicol .)


state 160

    (70) cycle -> DO body WHILE opening_par error closing_par semicol .

    closing_anglbrack reduce using rule 70 (cycle -> DO body WHILE opening_par error closing_par semicol .)
    identifier      reduce using rule 70 (cycle -> DO body WHILE opening_par error closing_par semicol .)
    IF              reduce using rule 70 (cycle -> DO body WHILE opening_par error closing_par semicol .)
    DO              reduce using rule 70 (cycle -> DO body WHILE opening_par error closing_par semicol .)
    PRINT           reduce using rule 70 (cycle -> DO body WHILE opening_par error closing_par semicol .)


state 161

    (18) func -> VOID identifier opening_par param_list closing_par opening_brack vars body closing_brack semicol .

    VOID            reduce using rule 18 (func -> VOID identifier opening_par param_list closing_par opening_brack vars body closing_brack semicol .)
    MAIN            reduce using rule 18 (func -> VOID identifier opening_par param_list closing_par opening_brack vars body closing_brack semicol .)


state 162

    (23) func -> VOID identifier opening_par error closing_par opening_brack vars body closing_brack semicol .

    VOID            reduce using rule 23 (func -> VOID identifier opening_par error closing_par opening_brack vars body closing_brack semicol .)
    MAIN            reduce using rule 23 (func -> VOID identifier opening_par error closing_par opening_brack vars body closing_brack semicol .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for identifier in state 27 resolved as shift
WARNING: shift/reduce conflict for IF in state 27 resolved as shift
WARNING: shift/reduce conflict for DO in state 27 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 27 resolved as shift
