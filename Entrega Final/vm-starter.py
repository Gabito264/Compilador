# -*- coding: utf-8 -*-
"""vm-starter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Npt_GLwIwO1Y4IYELTbXRRg2eSWVxo3O
"""
from main import program_is_ok
import re
# test = """7 17000
# 3 17001
# 2 17002
# "hola" 19000

# global_int 2
# global_float 1
# global_string 1
# global_void 0
# local_int 0
# local_float 0
# local_string 0
# temp_int 1
# temp_float 2
# temp_bool 0
# cte_int 3
# cte_float 0
# cte_string 1

# 1 gotomain -1 -1 2 
# 2 uminus 17000 - 12000 
# 3 = 12000 -1 1000 
# 4 = 17001 -1 1001 
# 5 / 1000 1001 13000 
# 6 + 13000 17002 13001 
# 7 = 13001 -1 2000 
# 8 = 19000 -1 3000 
# 9 print 1000 -1 -1 
# 10 print 1001 -1 -1 
# 11 print 2000 -1 -1 
# 12 print 3000 -1 -1 
# 13 print "\\n" -1 -1 
# """
if program_is_ok:

  print("Executing code... \n")

  input_program = "output.txt"

  with open(input_program) as f:
      input_program = f.read()

  #print(input_program)

  # info sobre los indices de cada region para simular la memoria
  regions = { "global_int"	  :	[1000]	,
        "global_float"	  :	[2000]	,
        "global_str"	  :	[3000]	,
        "global_void"	  :	[4000]	,
        "local_int"	  :	[7000]	,
        "local_float" :	[8000]	,
        "local_str"	  :	[9000]	,
        "temp_int"	  :	[12000]	,
        "temp_float"  :	[13000]	,
        "temp_bool"	  :	[14000]	,
        "cte_int"	  :	[17000]	,
        "cte_float"	  :	[18000]	,
        "cte_str"	  :	[19000]	 }

  memov = {}

  class Quad:
    op = -1
    arg1 = -1
    arg2 = -1
    destino = -1

    def __init__(self, lista):
      self.op = lista[0]
      self.arg1 = lista[1]
      self.arg2 = lista[2]
      self.destino = lista[3]

  seccion = 0
  lineas = input_program.split('\n')
  lista_quads = {}

  for i in lineas:
    linea  = re.findall(r'"[^"]*"|\S+', i)
    longitud = len(linea)

    # print(linea, len(linea))

    if (longitud == 0):
      seccion = seccion + 1
    elif (seccion == 0 and longitud == 2):
      if linea[1] >= "17000" and linea[1] <= "18999":
        memov[linea[1]] = float(linea[0]) # Guarda las constantes y su dir
      elif linea[1] >= "19000":
        memov[linea[1]] = linea[0].strip('"') # Quita los valores de " del principio y final del string
    # elif (seccion == 1 and longitud == 2):
    elif (seccion == 2):
      quadTemp = Quad(linea[1:])
      lista_quads[int(linea[0])] = quadTemp


  # for i in memov:
  #   print(i, memov[i])

  for key in lista_quads:
    q = lista_quads[key]
    print(key, q.op, q.arg1, q.arg2, q.destino)

  n_quads = len(lista_quads)
  current = 1

  print('\n\nEmpieza analisis')

  while (current <= n_quads):
    current_quad = lista_quads[current]
    if (current_quad.op == 'gotomain'):
      current = int(current_quad.destino)
    elif (current_quad.op == 'gotof'):
      if memov[current_quad.arg1]:
        current += 1
      else:
        current = int(current_quad.destino)
    elif (current_quad.op == 'goto'):
      current = int(current_quad.destino)
    elif (current_quad.op == 'gotoV'):
      if memov[current_quad.arg1]:
        current = int(current_quad.destino)
      else:
        current += 1
    elif (current_quad.op == '='):
      memov[current_quad.destino] = memov[current_quad.arg1]
      current += 1
    elif (current_quad.op == '+'):
      memov[current_quad.destino] = memov[current_quad.arg1] + memov[current_quad.arg2]
      current += 1
    elif (current_quad.op == '-'):
      memov[current_quad.destino] = memov[current_quad.arg1] - memov[current_quad.arg2]
      current += 1
    elif (current_quad.op == 'uminus'):
      memov[current_quad.destino] = - memov[current_quad.arg1]
      current+=1
    elif (current_quad.op == '/'):
      memov[current_quad.destino] = memov[current_quad.arg1] / memov[current_quad.arg2]
      current += 1
    elif (current_quad.op == '*'):
      memov[current_quad.destino] = memov[current_quad.arg1] * memov[current_quad.arg2]
      current += 1
    elif (current_quad.op == '>='):
      memov[current_quad.destino] = memov[current_quad.arg1] >= memov[current_quad.arg2]
      current += 1
    elif (current_quad.op == '>'):
      memov[current_quad.destino] = memov[current_quad.arg1] > memov[current_quad.arg2]
      current += 1
    elif (current_quad.op == '<='):
      memov[current_quad.destino] = memov[current_quad.arg1] <= memov[current_quad.arg2]
      current += 1
    elif (current_quad.op == '<'):
      memov[current_quad.destino] = memov[current_quad.arg1] < memov[current_quad.arg2]
      current += 1
    elif (current_quad.op == '!='):
      memov[current_quad.destino] = memov[current_quad.arg1] != memov[current_quad.arg2]
      current += 1
    elif (current_quad.op == 'print'):
      if (current_quad.arg1 == '"\\n"'):
        print('\n', end = "")
      else:
        print(memov[current_quad.arg1], end="")
      current += 1
    else:
      current += 1

  print()

  for i in memov:
    print(i, memov[i])

else:
  print("Errors found within the code, exiting...")