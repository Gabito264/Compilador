# -*- coding: utf-8 -*-
"""vm-starter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Npt_GLwIwO1Y4IYELTbXRRg2eSWVxo3O
"""

test = """7	17000
3	17001
2	17002

global_int 2
global_float 1
global_str 0
global_void 0
local_int	 0
local_float 0
local_str	0
temp_int	0
temp_float 2
temp_bool	0
cte_int	3
cte_float	0
cte_str	0

1	gotomain	-1	-1	2
2	= 	17000	-1	1000
3	=	17001	-1	1001
4	/	1000	1001	13001
5	+	13001	17002	13002
6	=	13002	-1	2001
7	print	2001	-1	-1
8	print  "\\n"	-1	-1
"""



# info sobre los indices de cada region para simular la memoria
regions = { "global_int"	  :	[1000]	,
			"global_float"	  :	[2000]	,
			"global_str"	  :	[3000]	,
			"global_void"	  :	[4000]	,
			"local_int"	  :	[7000]	,
			"local_float" :	[8000]	,
			"local_str"	  :	[9000]	,
			"temp_int"	  :	[12000]	,
			"temp_float"  :	[13000]	,
			"temp_bool"	  :	[14000]	,
			"cte_int"	  :	[17000]	,
			"cte_float"	  :	[18000]	,
			"cte_str"	  :	[19000]	 }

memov = {}

class Quad:
  op = -1
  arg1 = -1
  arg2 = -1
  destino = -1

  def __init__(self, lista):
    self.op = lista[0]
    self.arg1 = lista[1]
    self.arg2 = lista[2]
    self.destino = lista[3]

seccion = 0
lineas = test.split('\n')
lista_quads = {}

for i in lineas:
  linea  = i.split()
  longitud = len(linea)

  # print(linea, len(linea))

  if (longitud == 0):
    seccion = seccion + 1
  elif (seccion == 0 and longitud == 2):
    memov[linea[1]] = float(linea[0]) # Guarda las constantes y su dir
  # elif (seccion == 1 and longitud == 2):
  elif (seccion == 2):
    quadTemp = Quad(linea[1:])
    lista_quads[int(linea[0])] = quadTemp


for i in memov:
  print(i, memov[i])

print()

for key in lista_quads:
  q = lista_quads[key]
  print(key, q.op, q.arg1, q.arg2, q.destino)

n_quads = len(lista_quads)
current = 1

print('\n\nEmpieza analisis')

while (current <= n_quads):
  current_quad = lista_quads[current]
  if (current_quad.op == 'gotomain'):
    current = int(current_quad.destino)
  elif (current_quad.op == '='):
    memov[current_quad.destino] = memov[current_quad.arg1]
    current += 1
  elif (current_quad.op == '+'):
    memov[current_quad.destino] = memov[current_quad.arg1] + memov[current_quad.arg2]
    current += 1
  elif (current_quad.op == '/'):
    memov[current_quad.destino] = memov[current_quad.arg1] / memov[current_quad.arg2]
    current += 1
  elif (current_quad.op == 'print'):
    if (current_quad.arg1 == '"\\n"'):
      print('\n')
    else:
      print(memov[current_quad.arg1])
    current += 1
  else:
    current += 1

print()

for i in memov:
  print(i, memov[i])